!function(e){var r={};function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(t,n,e){i.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(n,t){if(1&t&&(n=i(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(i.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var r in n)i.d(e,r,function(t){return n[t]}.bind(null,r));return e},i.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(n,"a",n),n},i.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},i.p="",i(i.s=365)}([function(t,n,e){var g=e(2),d=e(18),y=e(11),m=e(12),w=e(19),b="prototype",x=function(t,n,e){var r,i,o,u,c=t&x.F,a=t&x.G,s=t&x.S,f=t&x.P,h=t&x.B,l=a?g:s?g[n]||(g[n]={}):(g[n]||{})[b],p=a?d:d[n]||(d[n]={}),v=p[b]||(p[b]={});for(r in a&&(e=n),e)o=((i=!c&&l&&void 0!==l[r])?l:e)[r],u=h&&i?w(o,g):f&&"function"==typeof o?w(Function.call,o):o,l&&m(l,r,o,t&x.U),p[r]!=o&&y(p,r,u),f&&v[r]!=o&&(v[r]=o)};g.core=d,x.F=1,x.G=2,x.S=4,x.P=8,x.B=16,x.W=32,x.U=64,x.R=128,t.exports=x},function(t,n,e){var r=e(4);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){var r=e(47)("wks"),i=e(33),o=e(2).Symbol,u="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=u&&o[t]||(u?o:i)("Symbol."+t))}).store=r},function(t,n,e){var r=e(21),i=Math.min;t.exports=function(t){return 0<t?i(r(t),9007199254740991):0}},function(t,n,e){t.exports=!e(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(1),i=e(94),o=e(23),u=Object.defineProperty;n.f=e(7)?Object.defineProperty:function(t,n,e){if(r(t),n=o(n,!0),r(e),i)try{return u(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){var r=e(24);t.exports=function(t){return Object(r(t))}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,e){var r=e(8),i=e(32);t.exports=e(7)?function(t,n,e){return r.f(t,n,i(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var o=e(2),u=e(11),c=e(14),a=e(33)("src"),r=e(165),i="toString",s=(""+r).split(i);e(18).inspectSource=function(t){return r.call(t)},(t.exports=function(t,n,e,r){var i="function"==typeof e;i&&(c(e,"name")||u(e,"name",n)),t[n]!==e&&(i&&(c(e,a)||u(e,a,t[n]?""+t[n]:s.join(String(n)))),t===o?t[n]=e:r?t[n]?t[n]=e:u(t,n,e):(delete t[n],u(t,n,e)))})(Function.prototype,i,function(){return"function"==typeof this&&this[a]||r.call(this)})},function(t,n,e){function r(t,n,e,r){var i=String(u(t)),o="<"+n;return""!==e&&(o+=" "+e+'="'+String(r).replace(c,"&quot;")+'"'),o+">"+i+"</"+n+">"}var i=e(0),o=e(3),u=e(24),c=/"/g;t.exports=function(n,t){var e={};e[n]=t(r),i(i.P+i.F*o(function(){var t=""[n]('"');return t!==t.toLowerCase()||3<t.split('"').length}),"String",e)}},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(48),i=e(24);t.exports=function(t){return r(i(t))}},function(t,n,e){var r=e(49),i=e(32),o=e(15),u=e(23),c=e(14),a=e(94),s=Object.getOwnPropertyDescriptor;n.f=e(7)?s:function(t,n){if(t=o(t),n=u(n,!0),a)try{return s(t,n)}catch(t){}if(c(t,n))return i(!r.f.call(t,n),t[n])}},function(t,n,e){var r=e(14),i=e(9),o=e(68)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,n){var e=t.exports={version:"2.6.9"};"number"==typeof __e&&(__e=e)},function(t,n,e){var o=e(10);t.exports=function(r,i,t){if(o(r),void 0===i)return r;switch(t){case 1:return function(t){return r.call(i,t)};case 2:return function(t,n){return r.call(i,t,n)};case 3:return function(t,n,e){return r.call(i,t,n,e)}}return function(){return r.apply(i,arguments)}}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(0<t?r:e)(t)}},function(t,n,e){"use strict";var r=e(3);t.exports=function(t,n){return!!t&&r(function(){n?t.call(null,function(){},1):t.call(null)})}},function(t,n,e){var i=e(4);t.exports=function(t,n){if(!i(t))return t;var e,r;if(n&&"function"==typeof(e=t.toString)&&!i(r=e.call(t)))return r;if("function"==typeof(e=t.valueOf)&&!i(r=e.call(t)))return r;if(!n&&"function"==typeof(e=t.toString)&&!i(r=e.call(t)))return r;throw TypeError("Can't convert object to primitive value")}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n,e){var i=e(0),o=e(18),u=e(3);t.exports=function(t,n){var e=(o.Object||{})[t]||Object[t],r={};r[t]=n(e),i(i.S+i.F*u(function(){e(1)}),"Object",r)}},function(t,n,e){var w=e(19),b=e(48),x=e(9),S=e(6),r=e(84);t.exports=function(h,t){var l=1==h,p=2==h,v=3==h,g=4==h,d=6==h,y=5==h||d,m=t||r;return function(t,n,e){for(var r,i,o=x(t),u=b(o),c=w(n,e,3),a=S(u.length),s=0,f=l?m(t,a):p?m(t,0):void 0;s<a;s++)if((y||s in u)&&(i=c(r=u[s],s,o),h))if(l)f[s]=i;else if(i)switch(h){case 3:return!0;case 5:return r;case 6:return s;case 2:f.push(r)}else if(g)return!1;return d?-1:v||g?g:f}}},function(t,n,e){"use strict";if(e(7)){var y=e(29),m=e(2),w=e(3),b=e(0),x=e(62),r=e(92),v=e(19),S=e(39),i=e(32),_=e(11),o=e(41),u=e(21),M=e(6),E=e(122),c=e(35),a=e(23),s=e(14),P=e(44),O=e(4),g=e(9),d=e(81),I=e(36),j=e(17),F=e(37).f,A=e(83),f=e(33),h=e(5),l=e(26),p=e(52),k=e(51),R=e(86),N=e(46),T=e(57),L=e(38),C=e(85),D=e(111),V=e(8),B=e(16),G=V.f,W=B.f,U=m.RangeError,z=m.TypeError,Y=m.Uint8Array,q="ArrayBuffer",J="Shared"+q,X="BYTES_PER_ELEMENT",$="prototype",K=Array[$],H=r.ArrayBuffer,Z=r.DataView,Q=l(0),tt=l(2),nt=l(3),et=l(4),rt=l(5),it=l(6),ot=p(!0),ut=p(!1),ct=R.values,at=R.keys,st=R.entries,ft=K.lastIndexOf,ht=K.reduce,lt=K.reduceRight,pt=K.join,vt=K.sort,gt=K.slice,dt=K.toString,yt=K.toLocaleString,mt=h("iterator"),wt=h("toStringTag"),bt=f("typed_constructor"),xt=f("def_constructor"),St=x.CONSTR,_t=x.TYPED,Mt=x.VIEW,Et="Wrong length!",Pt=l(1,function(t,n){return At(k(t,t[xt]),n)}),Ot=w(function(){return 1===new Y(new Uint16Array([1]).buffer)[0]}),It=!!Y&&!!Y[$].set&&w(function(){new Y(1).set({})}),jt=function(t,n){var e=u(t);if(e<0||e%n)throw U("Wrong offset!");return e},Ft=function(t){if(O(t)&&_t in t)return t;throw z(t+" is not a typed array!")},At=function(t,n){if(!(O(t)&&bt in t))throw z("It is not a typed array constructor!");return new t(n)},kt=function(t,n){return Rt(k(t,t[xt]),n)},Rt=function(t,n){for(var e=0,r=n.length,i=At(t,r);e<r;)i[e]=n[e++];return i},Nt=function(t,n,e){G(t,n,{get:function(){return this._d[e]}})},Tt=function(t,n,e){var r,i,o,u,c,a,s=g(t),f=arguments.length,h=1<f?n:void 0,l=void 0!==h,p=A(s);if(null!=p&&!d(p)){for(a=p.call(s),o=[],r=0;!(c=a.next()).done;r++)o.push(c.value);s=o}for(l&&2<f&&(h=v(h,e,2)),r=0,i=M(s.length),u=At(this,i);r<i;r++)u[r]=l?h(s[r],r):s[r];return u},Lt=function(){for(var t=0,n=arguments.length,e=At(this,n);t<n;)e[t]=arguments[t++];return e},Ct=!!Y&&w(function(){yt.call(new Y(1))}),Dt=function(){return yt.apply(Ct?gt.call(Ft(this)):Ft(this),arguments)},Vt={copyWithin:function(t,n,e){return D.call(Ft(this),t,n,2<arguments.length?e:void 0)},every:function(t,n){return et(Ft(this),t,1<arguments.length?n:void 0)},fill:function(t){return C.apply(Ft(this),arguments)},filter:function(t,n){return kt(this,tt(Ft(this),t,1<arguments.length?n:void 0))},find:function(t,n){return rt(Ft(this),t,1<arguments.length?n:void 0)},findIndex:function(t,n){return it(Ft(this),t,1<arguments.length?n:void 0)},forEach:function(t,n){Q(Ft(this),t,1<arguments.length?n:void 0)},indexOf:function(t,n){return ut(Ft(this),t,1<arguments.length?n:void 0)},includes:function(t,n){return ot(Ft(this),t,1<arguments.length?n:void 0)},join:function(t){return pt.apply(Ft(this),arguments)},lastIndexOf:function(t){return ft.apply(Ft(this),arguments)},map:function(t,n){return Pt(Ft(this),t,1<arguments.length?n:void 0)},reduce:function(t){return ht.apply(Ft(this),arguments)},reduceRight:function(t){return lt.apply(Ft(this),arguments)},reverse:function(){for(var t,n=this,e=Ft(n).length,r=Math.floor(e/2),i=0;i<r;)t=n[i],n[i++]=n[--e],n[e]=t;return n},some:function(t,n){return nt(Ft(this),t,1<arguments.length?n:void 0)},sort:function(t){return vt.call(Ft(this),t)},subarray:function(t,n){var e=Ft(this),r=e.length,i=c(t,r);return new(k(e,e[xt]))(e.buffer,e.byteOffset+i*e.BYTES_PER_ELEMENT,M((void 0===n?r:c(n,r))-i))}},Bt=function(t,n){return kt(this,gt.call(Ft(this),t,n))},Gt=function(t,n){Ft(this);var e=jt(n,1),r=this.length,i=g(t),o=M(i.length),u=0;if(r<o+e)throw U(Et);for(;u<o;)this[e+u]=i[u++]},Wt={entries:function(){return st.call(Ft(this))},keys:function(){return at.call(Ft(this))},values:function(){return ct.call(Ft(this))}},Ut=function(t,n){return O(t)&&t[_t]&&"symbol"!=typeof n&&n in t&&String(+n)==String(n)},zt=function(t,n){return Ut(t,n=a(n,!0))?i(2,t[n]):W(t,n)},Yt=function(t,n,e){return!(Ut(t,n=a(n,!0))&&O(e)&&s(e,"value"))||s(e,"get")||s(e,"set")||e.configurable||s(e,"writable")&&!e.writable||s(e,"enumerable")&&!e.enumerable?G(t,n,e):(t[n]=e.value,t)};St||(B.f=zt,V.f=Yt),b(b.S+b.F*!St,"Object",{getOwnPropertyDescriptor:zt,defineProperty:Yt}),w(function(){dt.call({})})&&(dt=yt=function(){return pt.call(this)});var qt=o({},Vt);o(qt,Wt),_(qt,mt,Wt.values),o(qt,{slice:Bt,set:Gt,constructor:function(){},toString:dt,toLocaleString:Dt}),Nt(qt,"buffer","b"),Nt(qt,"byteOffset","o"),Nt(qt,"byteLength","l"),Nt(qt,"length","e"),G(qt,wt,{get:function(){return this[_t]}}),t.exports=function(t,h,n,i){function l(t,n){G(t,n,{get:function(){return function(t,n){var e=t._d;return e.v[r](n*h+e.o,Ot)}(this,n)},set:function(t){return function(t,n,e){var r=t._d;i&&(e=(e=Math.round(e))<0?0:255<e?255:255&e),r.v[o](n*h+r.o,e,Ot)}(this,n,t)},enumerable:!0})}var p=t+((i=!!i)?"Clamped":"")+"Array",r="get"+t,o="set"+t,v=m[p],u=v||{},e=v&&j(v),c=!v||!x.ABV,a={},s=v&&v[$];c?(v=n(function(t,n,e,r){S(t,v,p,"_d");var i,o,u,c,a=0,s=0;if(O(n)){if(!(n instanceof H||(c=P(n))==q||c==J))return _t in n?Rt(v,n):Tt.call(v,n);i=n,s=jt(e,h);var f=n.byteLength;if(void 0===r){if(f%h)throw U(Et);if((o=f-s)<0)throw U(Et)}else if(f<(o=M(r)*h)+s)throw U(Et);u=o/h}else u=E(n),i=new H(o=u*h);for(_(t,"_d",{b:i,o:s,l:o,e:u,v:new Z(i)});a<u;)l(t,a++)}),s=v[$]=I(qt),_(s,"constructor",v)):w(function(){v(1)})&&w(function(){new v(-1)})&&T(function(t){new v,new v(null),new v(1.5),new v(t)},!0)||(v=n(function(t,n,e,r){var i;return S(t,v,p),O(n)?n instanceof H||(i=P(n))==q||i==J?void 0!==r?new u(n,jt(e,h),r):void 0!==e?new u(n,jt(e,h)):new u(n):_t in n?Rt(v,n):Tt.call(v,n):new u(E(n))}),Q(e!==Function.prototype?F(u).concat(F(e)):F(u),function(t){t in v||_(v,t,u[t])}),v[$]=s,y||(s.constructor=v));var f=s[mt],g=!!f&&("values"==f.name||null==f.name),d=Wt.values;_(v,bt,!0),_(s,_t,p),_(s,Mt,!0),_(s,xt,v),(i?new v(1)[wt]==p:wt in s)||G(s,wt,{get:function(){return p}}),a[p]=v,b(b.G+b.W+b.F*(v!=u),a),b(b.S,p,{BYTES_PER_ELEMENT:h}),b(b.S+b.F*w(function(){u.of.call(v,1)}),p,{from:Tt,of:Lt}),X in s||_(s,X,h),b(b.P,p,Vt),L(p),b(b.P+b.F*It,p,{set:Gt}),b(b.P+b.F*!g,p,Wt),y||s.toString==dt||(s.toString=dt),b(b.P+b.F*w(function(){new v(1).slice()}),p,{slice:Bt}),b(b.P+b.F*(w(function(){return[1,2].toLocaleString()!=new v([1,2]).toLocaleString()})||!w(function(){s.toLocaleString.call([1,2])})),p,{toLocaleString:Dt}),N[p]=g?f:d,y||g||_(s,mt,d)}}else t.exports=function(){}},function(t,n,e){function i(t,n,e){var r=c.get(t);if(!r){if(!e)return;c.set(t,r=new o)}var i=r.get(n);if(!i){if(!e)return;r.set(n,i=new o)}return i}var o=e(117),r=e(0),u=e(47)("metadata"),c=u.store||(u.store=new(e(120)));t.exports={store:c,map:i,has:function(t,n,e){var r=i(n,e,!1);return void 0!==r&&r.has(t)},get:function(t,n,e){var r=i(n,e,!1);return void 0===r?void 0:r.get(t)},set:function(t,n,e,r){i(e,r,!0).set(t,n)},keys:function(t,n){var e=i(t,n,!1),r=[];return e&&e.forEach(function(t,n){r.push(n)}),r},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){r(r.S,"Reflect",t)}}},function(t,n){t.exports=!1},function(t,n,e){function r(t){c(t,i,{value:{i:"O"+ ++a,w:{}}})}var i=e(33)("meta"),o=e(4),u=e(14),c=e(8).f,a=0,s=Object.isExtensible||function(){return!0},f=!e(3)(function(){return s(Object.preventExtensions({}))}),h=t.exports={KEY:i,NEED:!1,fastKey:function(t,n){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!u(t,i)){if(!s(t))return"F";if(!n)return"E";r(t)}return t[i].i},getWeak:function(t,n){if(!u(t,i)){if(!s(t))return!0;if(!n)return!1;r(t)}return t[i].w},onFreeze:function(t){return f&&h.NEED&&s(t)&&!u(t,i)&&r(t),t}}},function(t,n,e){var r=e(5)("unscopables"),i=Array.prototype;null==i[r]&&e(11)(i,r,{}),t.exports=function(t){i[r][t]=!0}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},function(t,n,e){var r=e(96),i=e(69);t.exports=Object.keys||function(t){return r(t,i)}},function(t,n,e){var r=e(21),i=Math.max,o=Math.min;t.exports=function(t,n){return(t=r(t))<0?i(t+n,0):o(t,n)}},function(t,n,r){function i(){}var o=r(1),u=r(97),c=r(69),a=r(68)("IE_PROTO"),s="prototype",f=function(){var t,n=r(66)("iframe"),e=c.length;for(n.style.display="none",r(70).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),f=t.F;e--;)delete f[s][c[e]];return f()};t.exports=Object.create||function(t,n){var e;return null!==t?(i[s]=o(t),e=new i,i[s]=null,e[a]=t):e=f(),void 0===n?e:u(e,n)}},function(t,n,e){var r=e(96),i=e(69).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,n,e){"use strict";var r=e(2),i=e(8),o=e(7),u=e(5)("species");t.exports=function(t){var n=r[t];o&&n&&!n[u]&&i.f(n,u,{configurable:!0,get:function(){return this}})}},function(t,n){t.exports=function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!");return t}},function(t,n,e){var l=e(19),p=e(109),v=e(81),g=e(1),d=e(6),y=e(83),m={},w={};(n=t.exports=function(t,n,e,r,i){var o,u,c,a,s=i?function(){return t}:y(t),f=l(e,r,n?2:1),h=0;if("function"!=typeof s)throw TypeError(t+" is not iterable!");if(v(s)){for(o=d(t.length);h<o;h++)if((a=n?f(g(u=t[h])[0],u[1]):f(t[h]))===m||a===w)return a}else for(c=s.call(t);!(u=c.next()).done;)if((a=p(c,f,u.value,n))===m||a===w)return a}).BREAK=m,n.RETURN=w},function(t,n,e){var i=e(12);t.exports=function(t,n,e){for(var r in n)i(t,r,n[r],e);return t}},function(t,n,e){var r=e(4);t.exports=function(t,n){if(!r(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},function(t,n,e){var r=e(8).f,i=e(14),o=e(5)("toStringTag");t.exports=function(t,n,e){t&&!i(t=e?t:t.prototype,o)&&r(t,o,{configurable:!0,value:n})}},function(t,n,e){var i=e(20),o=e(5)("toStringTag"),u="Arguments"==i(function(){return arguments}());t.exports=function(t){var n,e,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),o))?e:u?i(n):"Object"==(r=i(n))&&"function"==typeof n.callee?"Arguments":r}},function(t,n,e){function r(t,n,e){var r={},i=c(function(){return!!a[t]()||"​"!="​"[t]()}),o=r[t]=i?n(h):a[t];e&&(r[e]=o),u(u.P+u.F*i,"String",r)}var u=e(0),i=e(24),c=e(3),a=e(72),o="["+a+"]",s=RegExp("^"+o+o+"*"),f=RegExp(o+o+"*$"),h=r.trim=function(t,n){return t=String(i(t)),1&n&&(t=t.replace(s,"")),2&n&&(t=t.replace(f,"")),t};t.exports=r},function(t,n){t.exports={}},function(t,n,e){var r=e(18),i=e(2),o="__core-js_shared__",u=i[o]||(i[o]={});(t.exports=function(t,n){return u[t]||(u[t]=void 0!==n?n:{})})("versions",[]).push({version:r.version,mode:e(29)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,n,e){var r=e(20);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,e){"use strict";var r=e(1);t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n,e){var i=e(1),o=e(10),u=e(5)("species");t.exports=function(t,n){var e,r=i(t).constructor;return void 0===r||null==(e=i(r)[u])?n:o(e)}},function(t,n,e){var a=e(15),s=e(6),f=e(35);t.exports=function(c){return function(t,n,e){var r,i=a(t),o=s(i.length),u=f(e,o);if(c&&n!=n){for(;u<o;)if((r=i[u++])!=r)return!0}else for(;u<o;u++)if((c||u in i)&&i[u]===n)return c||u||0;return!c&&-1}}},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,e){var r=e(20);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,n,e){var a=e(21),s=e(24);t.exports=function(c){return function(t,n){var e,r,i=String(s(t)),o=a(n),u=i.length;return o<0||u<=o?c?"":void 0:(e=i.charCodeAt(o))<55296||56319<e||o+1===u||(r=i.charCodeAt(o+1))<56320||57343<r?c?i.charAt(o):e:c?i.slice(o,o+2):r-56320+(e-55296<<10)+65536}}},function(t,n,e){var r=e(4),i=e(20),o=e(5)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[o])?!!n:"RegExp"==i(t))}},function(t,n,e){var o=e(5)("iterator"),u=!1;try{var r=[7][o]();r.return=function(){u=!0},Array.from(r,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!u)return!1;var e=!1;try{var r=[7],i=r[o]();i.next=function(){return{done:e=!0}},r[o]=function(){return i},t(r)}catch(t){}return e}},function(t,n,e){"use strict";var i=e(44),o=RegExp.prototype.exec;t.exports=function(t,n){var e=t.exec;if("function"==typeof e){var r=e.call(t,n);if("object"!=typeof r)throw new TypeError("RegExp exec method returned something other than an Object or null");return r}if("RegExp"!==i(t))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(t,n)}},function(t,n,e){"use strict";e(113);var f=e(12),h=e(11),l=e(3),p=e(24),v=e(5),g=e(87),d=v("species"),y=!l(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),m=function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var e="ab".split(t);return 2===e.length&&"a"===e[0]&&"b"===e[1]}();t.exports=function(e,t,n){var r=v(e),o=!l(function(){var t={};return t[r]=function(){return 7},7!=""[e](t)}),i=o?!l(function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[d]=function(){return n}),n[r](""),!t}):void 0;if(!o||!i||"replace"===e&&!y||"split"===e&&!m){var u=/./[r],c=n(p,r,""[e],function(t,n,e,r,i){return n.exec===g?o&&!i?{done:!0,value:u.call(n,e,r)}:{done:!0,value:t.call(e,n,r)}:{done:!1}}),a=c[0],s=c[1];f(String.prototype,e,a),h(RegExp.prototype,r,2==t?function(t,n){return s.call(t,this,n)}:function(t){return s.call(t,this)})}}},function(t,n,e){var r=e(2).navigator;t.exports=r&&r.userAgent||""},function(t,n,e){"use strict";var y=e(2),m=e(0),w=e(12),b=e(41),x=e(30),S=e(40),_=e(39),M=e(4),E=e(3),P=e(57),O=e(43),I=e(73);t.exports=function(r,t,n,e,i,o){function u(t){var e=f[t];w(f,t,"delete"==t?function(t){return!(o&&!M(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(o&&!M(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return o&&!M(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,n){return e.call(this,0===t?0:t,n),this})}var c=y[r],a=c,s=i?"set":"add",f=a&&a.prototype,h={};if("function"==typeof a&&(o||f.forEach&&!E(function(){(new a).entries().next()}))){var l=new a,p=l[s](o?{}:-0,1)!=l,v=E(function(){l.has(1)}),g=P(function(t){new a(t)}),d=!o&&E(function(){for(var t=new a,n=5;n--;)t[s](n,n);return!t.has(-0)});g||(((a=t(function(t,n){_(t,a,r);var e=I(new c,t,a);return null!=n&&S(n,i,e[s],e),e})).prototype=f).constructor=a),(v||d)&&(u("delete"),u("has"),i&&u("get")),(d||p)&&u(s),o&&f.clear&&delete f.clear}else a=e.getConstructor(t,r,i,s),b(a.prototype,n),x.NEED=!0;return O(a,r),h[r]=a,m(m.G+m.W+m.F*(a!=c),h),o||e.setStrong(a,r,i),a}},function(t,n,e){for(var r,i=e(2),o=e(11),u=e(33),c=u("typed_array"),a=u("view"),s=!(!i.ArrayBuffer||!i.DataView),f=s,h=0,l="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");h<9;)(r=i[l[h++]])?(o(r.prototype,c,!0),o(r.prototype,a,!0)):f=!1;t.exports={ABV:s,CONSTR:f,TYPED:c,VIEW:a}},function(t,n,e){"use strict";t.exports=e(29)||!e(3)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete e(2)[t]})},function(t,n,e){"use strict";var r=e(0);t.exports=function(t){r(r.S,t,{of:function(){for(var t=arguments.length,n=new Array(t);t--;)n[t]=arguments[t];return new this(n)}})}},function(t,n,e){"use strict";var r=e(0),a=e(10),s=e(19),f=e(40);t.exports=function(t){r(r.S,t,{from:function(t,n,e){var r,i,o,u,c=n;return a(this),(r=void 0!==c)&&a(c),null==t?new this:(i=[],r?(o=0,u=s(c,e,2),f(t,!1,function(t){i.push(u(t,o++))})):f(t,!1,i.push,i),new this(i))}})}},function(t,n,e){var r=e(4),i=e(2).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,n,e){var r=e(2),i=e(18),o=e(29),u=e(95),c=e(8).f;t.exports=function(t){var n=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in n||c(n,t,{value:u.f(t)})}},function(t,n,e){var r=e(47)("keys"),i=e(33);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,e){var r=e(2).document;t.exports=r&&r.documentElement},function(t,n,i){function o(t,n){if(r(t),!e(n)&&null!==n)throw TypeError(n+": can't set as prototype!")}var e=i(4),r=i(1);t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,r){try{(r=i(19)(Function.call,i(16).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return o(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:o}},function(t,n){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,n,e){var o=e(4),u=e(71).set;t.exports=function(t,n,e){var r,i=n.constructor;return i!==e&&"function"==typeof i&&(r=i.prototype)!==e.prototype&&o(r)&&u&&u(t,r),t}},function(t,n,e){"use strict";var i=e(21),o=e(24);t.exports=function(t){var n=String(o(this)),e="",r=i(t);if(r<0||r==1/0)throw RangeError("Count can't be negative");for(;0<r;(r>>>=1)&&(n+=n))1&r&&(e+=n);return e}},function(t,n){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,n){var e=Math.expm1;t.exports=!e||22025.465794806718<e(10)||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:-1e-6<t&&t<1e-6?t+t*t/2:Math.exp(t)-1}:e},function(t,n,e){"use strict";function w(){return this}var b=e(29),x=e(0),S=e(12),_=e(11),M=e(46),E=e(78),P=e(43),O=e(17),I=e(5)("iterator"),j=!([].keys&&"next"in[].keys()),F="values";t.exports=function(t,n,e,r,i,o,u){E(e,n,r);function c(t){if(!j&&t in v)return v[t];switch(t){case"keys":case F:return function(){return new e(this,t)}}return function(){return new e(this,t)}}var a,s,f,h=n+" Iterator",l=i==F,p=!1,v=t.prototype,g=v[I]||v["@@iterator"]||i&&v[i],d=g||c(i),y=i?l?c("entries"):d:void 0,m="Array"==n&&v.entries||g;if(m&&(f=O(m.call(new t)))!==Object.prototype&&f.next&&(P(f,h,!0),b||"function"==typeof f[I]||_(f,I,w)),l&&g&&g.name!==F&&(p=!0,d=function(){return g.call(this)}),b&&!u||!j&&!p&&v[I]||_(v,I,d),M[n]=d,M[h]=w,i)if(a={values:l?d:c(F),keys:o?d:c("keys"),entries:y},u)for(s in a)s in v||S(v,s,a[s]);else x(x.P+x.F*(j||p),n,a);return a}},function(t,n,e){"use strict";var r=e(36),i=e(32),o=e(43),u={};e(11)(u,e(5)("iterator"),function(){return this}),t.exports=function(t,n,e){t.prototype=r(u,{next:i(1,e)}),o(t,n+" Iterator")}},function(t,n,e){var r=e(56),i=e(24);t.exports=function(t,n,e){if(r(n))throw TypeError("String#"+e+" doesn't accept regex!");return String(i(t))}},function(t,n,e){var r=e(5)("match");t.exports=function(n){var e=/./;try{"/./"[n](e)}catch(t){try{return e[r]=!1,!"/./"[n](e)}catch(t){}}return!0}},function(t,n,e){var r=e(46),i=e(5)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,n,e){"use strict";var r=e(8),i=e(32);t.exports=function(t,n,e){n in t?r.f(t,n,i(0,e)):t[n]=e}},function(t,n,e){var r=e(44),i=e(5)("iterator"),o=e(46);t.exports=e(18).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,n,e){var r=e(254);t.exports=function(t,n){return new(r(t))(n)}},function(t,n,e){"use strict";var s=e(9),f=e(35),h=e(6);t.exports=function(t,n,e){for(var r=s(this),i=h(r.length),o=arguments.length,u=f(1<o?n:void 0,i),c=2<o?e:void 0,a=void 0===c?i:f(c,i);u<a;)r[u++]=t;return r}},function(t,n,e){"use strict";var r=e(31),i=e(112),o=e(46),u=e(15);t.exports=e(77)(Array,"Array",function(t,n){this._t=u(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,i(1)):i(0,"keys"==n?e:"values"==n?t[e]:[e,t[e]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,n,e){"use strict";var u=e(50),c=RegExp.prototype.exec,a=String.prototype.replace,r=c,s="lastIndex",f=function(){var t=/a/,n=/b*/g;return c.call(t,"a"),c.call(n,"a"),0!==t[s]||0!==n[s]}(),h=void 0!==/()??/.exec("")[1];(f||h)&&(r=function(t){var n,e,r,i,o=this;return h&&(e=new RegExp("^"+o.source+"$(?!\\s)",u.call(o))),f&&(n=o[s]),r=c.call(o,t),f&&r&&(o[s]=o.global?r.index+r[0].length:n),h&&r&&1<r.length&&a.call(r[0],e,function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)}),r}),t.exports=r},function(t,n,e){"use strict";var r=e(55)(!0);t.exports=function(t,n,e){return n+(e?r(t,n).length:1)}},function(t,n,e){function r(){var t=+this;if(w.hasOwnProperty(t)){var n=w[t];delete w[t],n()}}function i(t){r.call(t.data)}var o,u,c,a=e(19),s=e(102),f=e(70),h=e(66),l=e(2),p=l.process,v=l.setImmediate,g=l.clearImmediate,d=l.MessageChannel,y=l.Dispatch,m=0,w={},b="onreadystatechange";v&&g||(v=function(t){for(var n=[],e=1;e<arguments.length;)n.push(arguments[e++]);return w[++m]=function(){s("function"==typeof t?t:Function(t),n)},o(m),m},g=function(t){delete w[t]},"process"==e(20)(p)?o=function(t){p.nextTick(a(r,t,1))}:y&&y.now?o=function(t){y.now(a(r,t,1))}:d?(c=(u=new d).port2,u.port1.onmessage=i,o=a(c.postMessage,c,1)):l.addEventListener&&"function"==typeof postMessage&&!l.importScripts?(o=function(t){l.postMessage(t+"","*")},l.addEventListener("message",i,!1)):o=b in h("script")?function(t){f.appendChild(h("script"))[b]=function(){f.removeChild(this),r.call(t)}}:function(t){setTimeout(a(r,t,1),0)}),t.exports={set:v,clear:g}},function(t,n,e){var c=e(2),a=e(89).set,s=c.MutationObserver||c.WebKitMutationObserver,f=c.process,h=c.Promise,l="process"==e(20)(f);t.exports=function(){function t(){var t,n;for(l&&(t=f.domain)&&t.exit();e;){n=e.fn,e=e.next;try{n()}catch(t){throw e?i():r=void 0,t}}r=void 0,t&&t.enter()}var e,r,i;if(l)i=function(){f.nextTick(t)};else if(!s||c.navigator&&c.navigator.standalone)if(h&&h.resolve){var n=h.resolve(void 0);i=function(){n.then(t)}}else i=function(){a.call(c,t)};else{var o=!0,u=document.createTextNode("");new s(t).observe(u,{characterData:!0}),i=function(){u.data=o=!o}}return function(t){var n={fn:t,next:void 0};r&&(r.next=n),e||(e=n,i()),r=n}}},function(t,n,e){"use strict";var i=e(10);function r(t){var e,r;this.promise=new t(function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n}),this.resolve=i(e),this.reject=i(r)}t.exports.f=function(t){return new r(t)}},function(t,n,e){"use strict";var r=e(2),i=e(7),o=e(29),u=e(62),c=e(11),a=e(41),s=e(3),f=e(39),h=e(21),l=e(6),p=e(122),v=e(37).f,g=e(8).f,d=e(85),y=e(43),m="ArrayBuffer",w="DataView",b="prototype",x="Wrong index!",S=r[m],_=r[w],M=r.Math,E=r.RangeError,P=r.Infinity,O=S,I=M.abs,j=M.pow,F=M.floor,A=M.log,k=M.LN2,R="byteLength",N="byteOffset",T=i?"_b":"buffer",L=i?"_l":R,C=i?"_o":N;function D(t,n,e){var r,i,o,u=new Array(e),c=8*e-n-1,a=(1<<c)-1,s=a>>1,f=23===n?j(2,-24)-j(2,-77):0,h=0,l=t<0||0===t&&1/t<0?1:0;for((t=I(t))!=t||t===P?(i=t!=t?1:0,r=a):(r=F(A(t)/k),t*(o=j(2,-r))<1&&(r--,o*=2),2<=(t+=1<=r+s?f/o:f*j(2,1-s))*o&&(r++,o/=2),a<=r+s?(i=0,r=a):1<=r+s?(i=(t*o-1)*j(2,n),r+=s):(i=t*j(2,s-1)*j(2,n),r=0));8<=n;u[h++]=255&i,i/=256,n-=8);for(r=r<<n|i,c+=n;0<c;u[h++]=255&r,r/=256,c-=8);return u[--h]|=128*l,u}function V(t,n,e){var r,i=8*e-n-1,o=(1<<i)-1,u=o>>1,c=i-7,a=e-1,s=t[a--],f=127&s;for(s>>=7;0<c;f=256*f+t[a],a--,c-=8);for(r=f&(1<<-c)-1,f>>=-c,c+=n;0<c;r=256*r+t[a],a--,c-=8);if(0===f)f=1-u;else{if(f===o)return r?NaN:s?-P:P;r+=j(2,n),f-=u}return(s?-1:1)*r*j(2,f-n)}function B(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function G(t){return[255&t]}function W(t){return[255&t,t>>8&255]}function U(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function z(t){return D(t,52,8)}function Y(t){return D(t,23,4)}function q(t,n,e){g(t[b],n,{get:function(){return this[e]}})}function J(t,n,e,r){var i=p(+e);if(i+n>t[L])throw E(x);var o=t[T]._b,u=i+t[C],c=o.slice(u,u+n);return r?c:c.reverse()}function X(t,n,e,r,i,o){var u=p(+e);if(u+n>t[L])throw E(x);for(var c=t[T]._b,a=u+t[C],s=r(+i),f=0;f<n;f++)c[a+f]=s[o?f:n-f-1]}if(u.ABV){if(!s(function(){S(1)})||!s(function(){new S(-1)})||s(function(){return new S,new S(1.5),new S(NaN),S.name!=m})){for(var $,K=(S=function(t){return f(this,S),new O(p(t))})[b]=O[b],H=v(O),Z=0;H.length>Z;)($=H[Z++])in S||c(S,$,O[$]);o||(K.constructor=S)}var Q=new _(new S(2)),tt=_[b].setInt8;Q.setInt8(0,2147483648),Q.setInt8(1,2147483649),!Q.getInt8(0)&&Q.getInt8(1)||a(_[b],{setInt8:function(t,n){tt.call(this,t,n<<24>>24)},setUint8:function(t,n){tt.call(this,t,n<<24>>24)}},!0)}else S=function(t){f(this,S,m);var n=p(t);this._b=d.call(new Array(n),0),this[L]=n},_=function(t,n,e){f(this,_,w),f(t,S,w);var r=t[L],i=h(n);if(i<0||r<i)throw E("Wrong offset!");if(r<i+(e=void 0===e?r-i:l(e)))throw E("Wrong length!");this[T]=t,this[C]=i,this[L]=e},i&&(q(S,R,"_l"),q(_,"buffer","_b"),q(_,R,"_l"),q(_,N,"_o")),a(_[b],{getInt8:function(t){return J(this,1,t)[0]<<24>>24},getUint8:function(t){return J(this,1,t)[0]},getInt16:function(t,n){var e=J(this,2,t,n);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t,n){var e=J(this,2,t,n);return e[1]<<8|e[0]},getInt32:function(t,n){return B(J(this,4,t,n))},getUint32:function(t,n){return B(J(this,4,t,n))>>>0},getFloat32:function(t,n){return V(J(this,4,t,n),23,4)},getFloat64:function(t,n){return V(J(this,8,t,n),52,8)},setInt8:function(t,n){X(this,1,t,G,n)},setUint8:function(t,n){X(this,1,t,G,n)},setInt16:function(t,n,e){X(this,2,t,W,n,e)},setUint16:function(t,n,e){X(this,2,t,W,n,e)},setInt32:function(t,n,e){X(this,4,t,U,n,e)},setUint32:function(t,n,e){X(this,4,t,U,n,e)},setFloat32:function(t,n,e){X(this,4,t,Y,n,e)},setFloat64:function(t,n,e){X(this,8,t,z,n,e)}});y(S,m),y(_,w),c(_[b],u.VIEW,!0),n[m]=S,n[w]=_},function(t,n){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n,e){t.exports=!e(7)&&!e(3)(function(){return 7!=Object.defineProperty(e(66)("div"),"a",{get:function(){return 7}}).a})},function(t,n,e){n.f=e(5)},function(t,n,e){var u=e(14),c=e(15),a=e(52)(!1),s=e(68)("IE_PROTO");t.exports=function(t,n){var e,r=c(t),i=0,o=[];for(e in r)e!=s&&u(r,e)&&o.push(e);for(;n.length>i;)u(r,e=n[i++])&&(~a(o,e)||o.push(e));return o}},function(t,n,e){var u=e(8),c=e(1),a=e(34);t.exports=e(7)?Object.defineProperties:function(t,n){c(t);for(var e,r=a(n),i=r.length,o=0;o<i;)u.f(t,e=r[o++],n[e]);return t}},function(t,n,e){var r=e(15),i=e(37).f,o={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return u.slice()}}(t):i(r(t))}},function(t,n,e){"use strict";var l=e(7),p=e(34),v=e(53),g=e(49),d=e(9),y=e(48),i=Object.assign;t.exports=!i||e(3)(function(){var t={},n={},e=Symbol(),r="abcdefghijklmnopqrst";return t[e]=7,r.split("").forEach(function(t){n[t]=t}),7!=i({},t)[e]||Object.keys(i({},n)).join("")!=r})?function(t,n){for(var e=d(t),r=arguments.length,i=1,o=v.f,u=g.f;i<r;)for(var c,a=y(arguments[i++]),s=o?p(a).concat(o(a)):p(a),f=s.length,h=0;h<f;)c=s[h++],l&&!u.call(a,c)||(e[c]=a[c]);return e}:i},function(t,n){t.exports=Object.is||function(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n}},function(t,n,e){"use strict";var o=e(10),u=e(4),c=e(102),a=[].slice,s={};t.exports=Function.bind||function(n){var e=o(this),r=a.call(arguments,1),i=function(){var t=r.concat(a.call(arguments));return this instanceof i?function(t,n,e){if(!(n in s)){for(var r=[],i=0;i<n;i++)r[i]="a["+i+"]";s[n]=Function("F,a","return new F("+r.join(",")+")")}return s[n](t,e)}(e,t.length,t):c(e,t,n)};return u(e.prototype)&&(i.prototype=e.prototype),i}},function(t,n){t.exports=function(t,n,e){var r=void 0===e;switch(n.length){case 0:return r?t():t.call(e);case 1:return r?t(n[0]):t.call(e,n[0]);case 2:return r?t(n[0],n[1]):t.call(e,n[0],n[1]);case 3:return r?t(n[0],n[1],n[2]):t.call(e,n[0],n[1],n[2]);case 4:return r?t(n[0],n[1],n[2],n[3]):t.call(e,n[0],n[1],n[2],n[3])}return t.apply(e,n)}},function(t,n,e){var r=e(2).parseInt,i=e(45).trim,o=e(72),u=/^[-+]?0[xX]/;t.exports=8!==r(o+"08")||22!==r(o+"0x16")?function(t,n){var e=i(String(t),3);return r(e,n>>>0||(u.test(e)?16:10))}:r},function(t,n,e){var r=e(2).parseFloat,i=e(45).trim;t.exports=1/r(e(72)+"-0")!=-1/0?function(t){var n=i(String(t),3),e=r(n);return 0===e&&"-"==n.charAt(0)?-0:e}:r},function(t,n,e){var r=e(20);t.exports=function(t,n){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(n);return+t}},function(t,n,e){var r=e(4),i=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&i(t)===t}},function(t,n){t.exports=Math.log1p||function(t){return-1e-8<(t=+t)&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,n,e){var o=e(75),r=Math.pow,u=r(2,-52),c=r(2,-23),a=r(2,127)*(2-c),s=r(2,-126);t.exports=Math.fround||function(t){var n,e,r=Math.abs(t),i=o(t);return r<s?i*function(t){return t+1/u-1/u}(r/s/c)*s*c:a<(e=(n=(1+c/u)*r)-(n-r))||e!=e?i*(1/0):i*e}},function(t,n,e){var o=e(1);t.exports=function(n,t,e,r){try{return r?t(o(e)[0],e[1]):t(e)}catch(t){var i=n.return;throw void 0!==i&&o(i.call(n)),t}}},function(t,n,e){var f=e(10),h=e(9),l=e(48),p=e(6);t.exports=function(t,n,e,r,i){f(n);var o=h(t),u=l(o),c=p(o.length),a=i?c-1:0,s=i?-1:1;if(e<2)for(;;){if(a in u){r=u[a],a+=s;break}if(a+=s,i?a<0:c<=a)throw TypeError("Reduce of empty array with no initial value")}for(;i?0<=a:a<c;a+=s)a in u&&(r=n(r,u[a],a,o));return r}},function(t,n,e){"use strict";var f=e(9),h=e(35),l=e(6);t.exports=[].copyWithin||function(t,n,e){var r=f(this),i=l(r.length),o=h(t,i),u=h(n,i),c=2<arguments.length?e:void 0,a=Math.min((void 0===c?i:h(c,i))-u,i-o),s=1;for(u<o&&o<u+a&&(s=-1,u+=a-1,o+=a-1);0<a--;)u in r?r[o]=r[u]:delete r[o],o+=s,u+=s;return r}},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,e){"use strict";var r=e(87);e(0)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,n,e){e(7)&&"g"!=/./g.flags&&e(8).f(RegExp.prototype,"flags",{configurable:!0,get:e(50)})},function(t,n){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,n,e){var r=e(1),i=e(4),o=e(91);t.exports=function(t,n){if(r(t),i(n)&&n.constructor===t)return n;var e=o.f(t);return(0,e.resolve)(n),e.promise}},function(t,n,e){"use strict";var r=e(118),i=e(42);t.exports=e(61)("Map",function(n){return function(t){return n(this,0<arguments.length?t:void 0)}},{get:function(t){var n=r.getEntry(i(this,"Map"),t);return n&&n.v},set:function(t,n){return r.def(i(this,"Map"),0===t?0:t,n)}},r,!0)},function(t,n,e){"use strict";function u(t,n){var e,r=v(n);if("F"!==r)return t._i[r];for(e=t._f;e;e=e.n)if(e.k==n)return e}var c=e(8).f,a=e(36),s=e(41),f=e(19),h=e(39),l=e(40),r=e(77),i=e(112),o=e(38),p=e(7),v=e(30).fastKey,g=e(42),d=p?"_s":"size";t.exports={getConstructor:function(t,o,e,r){var i=t(function(t,n){h(t,i,o,"_i"),t._t=o,t._i=a(null),t._f=void 0,t._l=void 0,t[d]=0,null!=n&&l(n,e,t[r],t)});return s(i.prototype,{clear:function(){for(var t=g(this,o),n=t._i,e=t._f;e;e=e.n)e.r=!0,e.p&&(e.p=e.p.n=void 0),delete n[e.i];t._f=t._l=void 0,t[d]=0},delete:function(t){var n=g(this,o),e=u(n,t);if(e){var r=e.n,i=e.p;delete n._i[e.i],e.r=!0,i&&(i.n=r),r&&(r.p=i),n._f==e&&(n._f=r),n._l==e&&(n._l=i),n[d]--}return!!e},forEach:function(t,n){g(this,o);for(var e,r=f(t,1<arguments.length?n:void 0,3);e=e?e.n:this._f;)for(r(e.v,e.k,this);e&&e.r;)e=e.p},has:function(t){return!!u(g(this,o),t)}}),p&&c(i.prototype,"size",{get:function(){return g(this,o)[d]}}),i},def:function(t,n,e){var r,i,o=u(t,n);return o?o.v=e:(t._l=o={i:i=v(n,!0),k:n,v:e,p:r=t._l,n:void 0,r:!1},t._f||(t._f=o),r&&(r.n=o),t[d]++,"F"!==i&&(t._i[i]=o)),t},getEntry:u,setStrong:function(t,e,n){r(t,e,function(t,n){this._t=g(t,e),this._k=n,this._l=void 0},function(){for(var t=this,n=t._k,e=t._l;e&&e.r;)e=e.p;return t._t&&(t._l=e=e?e.n:t._t._f)?i(0,"keys"==n?e.k:"values"==n?e.v:[e.k,e.v]):(t._t=void 0,i(1))},n?"entries":"values",!n,!0),o(e)}}},function(t,n,e){"use strict";var r=e(118),i=e(42);t.exports=e(61)("Set",function(n){return function(t){return n(this,0<arguments.length?t:void 0)}},{add:function(t){return r.def(i(this,"Set"),t=0===t?0:t,t)}},r)},function(t,n,e){"use strict";function r(n){return function(t){return n(this,0<arguments.length?t:void 0)}}var o,i=e(2),u=e(26)(0),c=e(12),a=e(30),s=e(99),f=e(121),h=e(4),l=e(42),p=e(42),v=!i.ActiveXObject&&"ActiveXObject"in i,g="WeakMap",d=a.getWeak,y=Object.isExtensible,m=f.ufstore,w={get:function(t){if(h(t)){var n=d(t);return!0===n?m(l(this,g)).get(t):n?n[this._i]:void 0}},set:function(t,n){return f.def(l(this,g),t,n)}},b=t.exports=e(61)(g,r,w,f,!0,!0);p&&v&&(s((o=f.getConstructor(r,g)).prototype,w),a.NEED=!0,u(["delete","has","get","set"],function(r){var t=b.prototype,i=t[r];c(t,r,function(t,n){if(!h(t)||y(t))return i.call(this,t,n);this._f||(this._f=new o);var e=this._f[r](t,n);return"set"==r?this:e})}))},function(t,n,e){"use strict";function u(t){return t._l||(t._l=new y)}function r(t,n){return v(t.a,function(t){return t[0]===n})}var c=e(41),a=e(30).getWeak,i=e(1),s=e(4),f=e(39),h=e(40),o=e(26),l=e(14),p=e(42),v=o(5),g=o(6),d=0,y=function(){this.a=[]};y.prototype={get:function(t){var n=r(this,t);if(n)return n[1]},has:function(t){return!!r(this,t)},set:function(t,n){var e=r(this,t);e?e[1]=n:this.a.push([t,n])},delete:function(n){var t=g(this.a,function(t){return t[0]===n});return~t&&this.a.splice(t,1),!!~t}},t.exports={getConstructor:function(t,e,r,i){var o=t(function(t,n){f(t,o,e,"_i"),t._t=e,t._i=d++,t._l=void 0,null!=n&&h(n,r,t[i],t)});return c(o.prototype,{delete:function(t){if(!s(t))return!1;var n=a(t);return!0===n?u(p(this,e)).delete(t):n&&l(n,this._i)&&delete n[this._i]},has:function(t){if(!s(t))return!1;var n=a(t);return!0===n?u(p(this,e)).has(t):n&&l(n,this._i)}}),o},def:function(t,n,e){var r=a(i(n),!0);return!0===r?u(t).set(n,e):r[t._i]=e,t},ufstore:u}},function(t,n,e){var r=e(21),i=e(6);t.exports=function(t){if(void 0===t)return 0;var n=r(t),e=i(n);if(n!==e)throw RangeError("Wrong length!");return e}},function(t,n,e){var r=e(37),i=e(53),o=e(1),u=e(2).Reflect;t.exports=u&&u.ownKeys||function(t){var n=r.f(o(t)),e=i.f;return e?n.concat(e(t)):n}},function(t,n,e){"use strict";var v=e(54),g=e(4),d=e(6),y=e(19),m=e(5)("isConcatSpreadable");t.exports=function t(n,e,r,i,o,u,c,a){for(var s,f,h=o,l=0,p=!!c&&y(c,a,3);l<i;){if(l in r){if(s=p?p(r[l],l,e):r[l],f=!1,g(s)&&(f=void 0!==(f=s[m])?!!f:v(s)),f&&0<u)h=t(n,e,s,d(s.length),h,u-1)-1;else{if(9007199254740991<=h)throw TypeError();n[h]=s}h++}l++}return h}},function(t,n,e){var f=e(6),h=e(74),l=e(24);t.exports=function(t,n,e,r){var i=String(l(t)),o=i.length,u=void 0===e?" ":String(e),c=f(n);if(c<=o||""==u)return i;var a=c-o,s=h.call(u,Math.ceil(a/u.length));return s.length>a&&(s=s.slice(0,a)),r?s+i:i+s}},function(t,n,e){var a=e(7),s=e(34),f=e(15),h=e(49).f;t.exports=function(c){return function(t){for(var n,e=f(t),r=s(e),i=r.length,o=0,u=[];o<i;)n=r[o++],a&&!h.call(e,n)||u.push(c?[n,e[n]]:e[n]);return u}}},function(t,n,e){var r=e(44),i=e(128);t.exports=function(t){return function(){if(r(this)!=t)throw TypeError(t+"#toJSON isn't generic");return i(this)}}},function(t,n,e){var r=e(40);t.exports=function(t,n){var e=[];return r(t,!1,e.push,e,n),e}},function(t,n){t.exports=Math.scale||function(t,n,e,r,i){return 0===arguments.length||t!=t||n!=n||e!=e||r!=r||i!=i?NaN:t===1/0||t===-1/0?t:(t-n)*(i-r)/(e-n)+r}},function(t,n,e){t.exports=e.p+"images/dog.png"},function(t,n,e){t.exports=e.p+"images/0.png"},function(t,n,e){t.exports=e.p+"images/1.png"},function(t,n,e){t.exports=e.p+"images/2.png"},function(t,n,e){t.exports=e.p+"images/3.png"},function(t,n,e){t.exports=e.p+"images/4.png"},function(t,n,e){t.exports=e.p+"images/5.png"},function(t,n,e){t.exports=e.p+"images/6.png"},function(t,n,e){t.exports=e.p+"images/7.png"},function(t,n,e){t.exports=e.p+"images/8.png"},function(t,n,e){t.exports=e.p+"images/9.png"},function(t,n,e){t.exports=e.p+"images/10.png"},function(t,n,e){t.exports=e.p+"images/11.png"},function(t,n,e){t.exports=e.p+"images/12.png"},function(t,n,e){t.exports=e.p+"images/13.png"},function(t,n,e){t.exports=e.p+"images/14.png"},function(t,n,e){t.exports=e.p+"images/15.png"},function(t,n,e){t.exports=e.p+"images/16.png"},function(t,n,e){t.exports=e.p+"images/17.png"},function(t,n,e){t.exports=e.p+"images/18.png"},function(t,n,e){t.exports=e.p+"images/BG.png"},function(t,n,e){t.exports=e.p+"images/Tree_1.png"},function(t,n,e){t.exports=e.p+"images/Tree_2.png"},function(t,n,e){t.exports=e.p+"images/Tree_3.png"},function(t,n,e){t.exports=e.p+"images/icon-petshop.png"},function(t,n,e){t.exports=e.p+"images/bird.png"},function(t,n,e){t.exports=e.p+"images/left.png"},function(t,n,e){t.exports=e.p+"images/right.png"},function(t,n,e){t.exports=e.p+"images/jump.png"},function(t,n,e){t.exports=e.p+"images/restart.png"},function(t,n,e){t.exports=e.p+"images/start.png"},function(t,n,e){t.exports=e.p+"images/logo.png"},function(t,n,e){"use strict";(function(t){if(e(163),e(360),e(361),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;function n(t,n,e){t[n]||Object.defineProperty(t,n,{writable:!0,configurable:!0,value:e})}n(String.prototype,"padLeft","".padStart),n(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&n(Array,t,Function.call.bind([][t]))})}).call(this,e(93))},function(t,n,e){e(164),e(167),e(168),e(169),e(170),e(171),e(172),e(173),e(174),e(175),e(176),e(177),e(178),e(179),e(180),e(181),e(182),e(183),e(184),e(185),e(186),e(187),e(188),e(189),e(190),e(191),e(192),e(193),e(194),e(195),e(196),e(197),e(198),e(199),e(200),e(201),e(202),e(203),e(204),e(205),e(206),e(207),e(208),e(209),e(210),e(211),e(212),e(213),e(214),e(215),e(216),e(217),e(218),e(219),e(220),e(221),e(222),e(223),e(224),e(225),e(226),e(227),e(228),e(229),e(230),e(231),e(232),e(233),e(234),e(235),e(236),e(237),e(238),e(239),e(240),e(241),e(242),e(244),e(245),e(247),e(248),e(249),e(250),e(251),e(252),e(253),e(255),e(256),e(257),e(258),e(259),e(260),e(261),e(262),e(263),e(264),e(265),e(266),e(267),e(86),e(268),e(113),e(269),e(114),e(270),e(271),e(272),e(273),e(274),e(117),e(119),e(120),e(275),e(276),e(277),e(278),e(279),e(280),e(281),e(282),e(283),e(284),e(285),e(286),e(287),e(288),e(289),e(290),e(291),e(292),e(293),e(294),e(295),e(296),e(297),e(298),e(299),e(300),e(301),e(302),e(303),e(304),e(305),e(306),e(307),e(308),e(309),e(310),e(311),e(312),e(313),e(314),e(315),e(316),e(317),e(318),e(319),e(320),e(321),e(322),e(323),e(324),e(325),e(326),e(327),e(328),e(329),e(330),e(331),e(332),e(333),e(334),e(335),e(336),e(337),e(338),e(339),e(340),e(341),e(342),e(343),e(344),e(345),e(346),e(347),e(348),e(349),e(350),e(351),e(352),e(353),e(354),e(355),e(356),e(357),e(358),e(359),t.exports=e(18)},function(t,n,e){"use strict";function r(t){var n=J[t]=F(V[W]);return n._k=t,n}function i(t,n){M(t);for(var e,r=S(n=O(n)),i=0,o=r.length;i<o;)nt(t,e=r[i++],n[e]);return t}function o(t){var n=Y.call(this,t=I(t,!0));return!(this===$&&f(J,t)&&!f(X,t))&&(!(n||!f(this,t)||!f(J,t)||f(this,U)&&this[U][t])||n)}function u(t,n){if(t=O(t),n=I(n,!0),t!==$||!f(J,n)||f(X,n)){var e=L(t,n);return!e||!f(J,n)||f(t,U)&&t[U][n]||(e.enumerable=!0),e}}function c(t){for(var n,e=D(O(t)),r=[],i=0;e.length>i;)f(J,n=e[i++])||n==U||n==v||r.push(n);return r}function a(t){for(var n,e=t===$,r=D(e?X:O(t)),i=[],o=0;r.length>o;)!f(J,n=r[o++])||e&&!f($,n)||i.push(J[n]);return i}var s=e(2),f=e(14),h=e(7),l=e(0),p=e(12),v=e(30).KEY,g=e(3),d=e(47),y=e(43),m=e(33),w=e(5),b=e(95),x=e(67),S=e(166),_=e(54),M=e(1),E=e(4),P=e(9),O=e(15),I=e(23),j=e(32),F=e(36),A=e(98),k=e(16),R=e(53),N=e(8),T=e(34),L=k.f,C=N.f,D=A.f,V=s.Symbol,B=s.JSON,G=B&&B.stringify,W="prototype",U=w("_hidden"),z=w("toPrimitive"),Y={}.propertyIsEnumerable,q=d("symbol-registry"),J=d("symbols"),X=d("op-symbols"),$=Object[W],K="function"==typeof V&&!!R.f,H=s.QObject,Z=!H||!H[W]||!H[W].findChild,Q=h&&g(function(){return 7!=F(C({},"a",{get:function(){return C(this,"a",{value:7}).a}})).a})?function(t,n,e){var r=L($,n);r&&delete $[n],C(t,n,e),r&&t!==$&&C($,n,r)}:C,tt=K&&"symbol"==typeof V.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof V},nt=function(t,n,e){return t===$&&nt(X,n,e),M(t),n=I(n,!0),M(e),f(J,n)?(e.enumerable?(f(t,U)&&t[U][n]&&(t[U][n]=!1),e=F(e,{enumerable:j(0,!1)})):(f(t,U)||C(t,U,j(1,{})),t[U][n]=!0),Q(t,n,e)):C(t,n,e)};K||(p((V=function(t){if(this instanceof V)throw TypeError("Symbol is not a constructor!");var n=m(0<arguments.length?t:void 0),e=function(t){this===$&&e.call(X,t),f(this,U)&&f(this[U],n)&&(this[U][n]=!1),Q(this,n,j(1,t))};return h&&Z&&Q($,n,{configurable:!0,set:e}),r(n)})[W],"toString",function(){return this._k}),k.f=u,N.f=nt,e(37).f=A.f=c,e(49).f=o,R.f=a,h&&!e(29)&&p($,"propertyIsEnumerable",o,!0),b.f=function(t){return r(w(t))}),l(l.G+l.W+l.F*!K,{Symbol:V});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),rt=0;et.length>rt;)w(et[rt++]);for(var it=T(w.store),ot=0;it.length>ot;)x(it[ot++]);l(l.S+l.F*!K,"Symbol",{for:function(t){return f(q,t+="")?q[t]:q[t]=V(t)},keyFor:function(t){if(!tt(t))throw TypeError(t+" is not a symbol!");for(var n in q)if(q[n]===t)return n},useSetter:function(){Z=!0},useSimple:function(){Z=!1}}),l(l.S+l.F*!K,"Object",{create:function(t,n){return void 0===n?F(t):i(F(t),n)},defineProperty:nt,defineProperties:i,getOwnPropertyDescriptor:u,getOwnPropertyNames:c,getOwnPropertySymbols:a});var ut=g(function(){R.f(1)});l(l.S+l.F*ut,"Object",{getOwnPropertySymbols:function(t){return R.f(P(t))}}),B&&l(l.S+l.F*(!K||g(function(){var t=V();return"[null]"!=G([t])||"{}"!=G({a:t})||"{}"!=G(Object(t))})),"JSON",{stringify:function(t){for(var n,e,r=[t],i=1;i<arguments.length;)r.push(arguments[i++]);if(e=n=r[1],(E(n)||void 0!==t)&&!tt(t))return _(n)||(n=function(t,n){if("function"==typeof e&&(n=e.call(this,t,n)),!tt(n))return n}),r[1]=n,G.apply(B,r)}}),V[W][z]||e(11)(V[W],z,V[W].valueOf),y(V,"Symbol"),y(Math,"Math",!0),y(s.JSON,"JSON",!0)},function(t,n,e){t.exports=e(47)("native-function-to-string",Function.toString)},function(t,n,e){var c=e(34),a=e(53),s=e(49);t.exports=function(t){var n=c(t),e=a.f;if(e)for(var r,i=e(t),o=s.f,u=0;i.length>u;)o.call(t,r=i[u++])&&n.push(r);return n}},function(t,n,e){var r=e(0);r(r.S,"Object",{create:e(36)})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(7),"Object",{defineProperty:e(8).f})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(7),"Object",{defineProperties:e(97)})},function(t,n,e){var r=e(15),i=e(16).f;e(25)("getOwnPropertyDescriptor",function(){return function(t,n){return i(r(t),n)}})},function(t,n,e){var r=e(9),i=e(17);e(25)("getPrototypeOf",function(){return function(t){return i(r(t))}})},function(t,n,e){var r=e(9),i=e(34);e(25)("keys",function(){return function(t){return i(r(t))}})},function(t,n,e){e(25)("getOwnPropertyNames",function(){return e(98).f})},function(t,n,e){var r=e(4),i=e(30).onFreeze;e(25)("freeze",function(n){return function(t){return n&&r(t)?n(i(t)):t}})},function(t,n,e){var r=e(4),i=e(30).onFreeze;e(25)("seal",function(n){return function(t){return n&&r(t)?n(i(t)):t}})},function(t,n,e){var r=e(4),i=e(30).onFreeze;e(25)("preventExtensions",function(n){return function(t){return n&&r(t)?n(i(t)):t}})},function(t,n,e){var r=e(4);e(25)("isFrozen",function(n){return function(t){return!r(t)||!!n&&n(t)}})},function(t,n,e){var r=e(4);e(25)("isSealed",function(n){return function(t){return!r(t)||!!n&&n(t)}})},function(t,n,e){var r=e(4);e(25)("isExtensible",function(n){return function(t){return!!r(t)&&(!n||n(t))}})},function(t,n,e){var r=e(0);r(r.S+r.F,"Object",{assign:e(99)})},function(t,n,e){var r=e(0);r(r.S,"Object",{is:e(100)})},function(t,n,e){var r=e(0);r(r.S,"Object",{setPrototypeOf:e(71).set})},function(t,n,e){"use strict";var r=e(44),i={};i[e(5)("toStringTag")]="z",i+""!="[object z]"&&e(12)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,n,e){var r=e(0);r(r.P,"Function",{bind:e(101)})},function(t,n,e){var r=e(8).f,i=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in i||e(7)&&r(i,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},function(t,n,e){"use strict";var r=e(4),i=e(17),o=e(5)("hasInstance"),u=Function.prototype;o in u||e(8).f(u,o,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},function(t,n,e){var r=e(0),i=e(103);r(r.G+r.F*(parseInt!=i),{parseInt:i})},function(t,n,e){var r=e(0),i=e(104);r(r.G+r.F*(parseFloat!=i),{parseFloat:i})},function(t,n,e){"use strict";function r(t){var n=f(t,!1);if("string"==typeof n&&2<n.length){var e,r,i,o=(n=w?n.trim():p(n,3)).charCodeAt(0);if(43===o||45===o){if(88===(e=n.charCodeAt(2))||120===e)return NaN}else if(48===o){switch(n.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+n}for(var u,c=n.slice(2),a=0,s=c.length;a<s;a++)if((u=c.charCodeAt(a))<48||i<u)return NaN;return parseInt(c,r)}}return+n}var i=e(2),o=e(14),u=e(20),c=e(73),f=e(23),a=e(3),s=e(37).f,h=e(16).f,l=e(8).f,p=e(45).trim,v="Number",g=i[v],d=g,y=g.prototype,m=u(e(36)(y))==v,w="trim"in String.prototype;if(!g(" 0o1")||!g("0b1")||g("+0x1")){g=function(t){var n=arguments.length<1?0:t,e=this;return e instanceof g&&(m?a(function(){y.valueOf.call(e)}):u(e)!=v)?c(new d(r(n)),e,g):r(n)};for(var b,x=e(7)?s(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),S=0;x.length>S;S++)o(d,b=x[S])&&!o(g,b)&&l(g,b,h(d,b));(g.prototype=y).constructor=g,e(12)(i,v,g)}},function(t,n,e){"use strict";function s(t,n){for(var e=-1,r=n;++e<6;)r+=t*u[e],u[e]=r%1e7,r=o(r/1e7)}function f(t){for(var n=6,e=0;0<=--n;)e+=u[n],u[n]=o(e/t),e=e%t*1e7}function h(){for(var t=6,n="";0<=--t;)if(""!==n||0===t||0!==u[t]){var e=String(u[t]);n=""===n?e:n+v.call("0",7-e.length)+e}return n}var r=e(0),l=e(21),p=e(105),v=e(74),i=1..toFixed,o=Math.floor,u=[0,0,0,0,0,0],g="Number.toFixed: incorrect invocation!",d=function(t,n,e){return 0===n?e:n%2==1?d(t,n-1,e*t):d(t*t,n/2,e)};r(r.P+r.F*(!!i&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!e(3)(function(){i.call({})})),"Number",{toFixed:function(t){var n,e,r,i,o=p(this,g),u=l(t),c="",a="0";if(u<0||20<u)throw RangeError(g);if(o!=o)return"NaN";if(o<=-1e21||1e21<=o)return String(o);if(o<0&&(c="-",o=-o),1e-21<o)if(e=(n=function(t){for(var n=0,e=t;4096<=e;)n+=12,e/=4096;for(;2<=e;)n+=1,e/=2;return n}(o*d(2,69,1))-69)<0?o*d(2,-n,1):o/d(2,n,1),e*=4503599627370496,0<(n=52-n)){for(s(0,e),r=u;7<=r;)s(1e7,0),r-=7;for(s(d(10,r,1),0),r=n-1;23<=r;)f(1<<23),r-=23;f(1<<r),s(1,1),f(2),a=h()}else s(0,e),s(1<<-n,0),a=h()+v.call("0",u);return a=0<u?c+((i=a.length)<=u?"0."+v.call("0",u-i)+a:a.slice(0,i-u)+"."+a.slice(i-u)):c+a}})},function(t,n,e){"use strict";var r=e(0),i=e(3),o=e(105),u=1..toPrecision;r(r.P+r.F*(i(function(){return"1"!==u.call(1,void 0)})||!i(function(){u.call({})})),"Number",{toPrecision:function(t){var n=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?u.call(n):u.call(n,t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,n,e){var r=e(0),i=e(2).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{isInteger:e(106)})},function(t,n,e){var r=e(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,n,e){var r=e(0),i=e(106),o=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},function(t,n,e){var r=e(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,n,e){var r=e(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,n,e){var r=e(0),i=e(104);r(r.S+r.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},function(t,n,e){var r=e(0),i=e(103);r(r.S+r.F*(Number.parseInt!=i),"Number",{parseInt:i})},function(t,n,e){var r=e(0),i=e(107),o=Math.sqrt,u=Math.acosh;r(r.S+r.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:94906265.62425156<t?Math.log(t)+Math.LN2:i(t-1+o(t-1)*o(t+1))}})},function(t,n,e){var r=e(0),i=Math.asinh;r(r.S+r.F*!(i&&0<1/i(0)),"Math",{asinh:function t(n){return isFinite(n=+n)&&0!=n?n<0?-t(-n):Math.log(n+Math.sqrt(n*n+1)):n}})},function(t,n,e){var r=e(0),i=Math.atanh;r(r.S+r.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,n,e){var r=e(0),i=e(75);r(r.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,n,e){var r=e(0),i=Math.exp;r(r.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},function(t,n,e){var r=e(0),i=e(76);r(r.S+r.F*(i!=Math.expm1),"Math",{expm1:i})},function(t,n,e){var r=e(0);r(r.S,"Math",{fround:e(108)})},function(t,n,e){var r=e(0),a=Math.abs;r(r.S,"Math",{hypot:function(t,n){for(var e,r,i=0,o=0,u=arguments.length,c=0;o<u;)c<(e=a(arguments[o++]))?(i=i*(r=c/e)*r+1,c=e):i+=0<e?(r=e/c)*r:e;return c===1/0?1/0:c*Math.sqrt(i)}})},function(t,n,e){var r=e(0),i=Math.imul;r(r.S+r.F*e(3)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function(t,n){var e=65535,r=+t,i=+n,o=e&r,u=e&i;return 0|o*u+((e&r>>>16)*u+o*(e&i>>>16)<<16>>>0)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log1p:e(107)})},function(t,n,e){var r=e(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,n,e){var r=e(0);r(r.S,"Math",{sign:e(75)})},function(t,n,e){var r=e(0),i=e(76),o=Math.exp;r(r.S+r.F*e(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},function(t,n,e){var r=e(0),i=e(76),o=Math.exp;r(r.S,"Math",{tanh:function(t){var n=i(t=+t),e=i(-t);return n==1/0?1:e==1/0?-1:(n-e)/(o(t)+o(-t))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{trunc:function(t){return(0<t?Math.floor:Math.ceil)(t)}})},function(t,n,e){var r=e(0),o=e(35),u=String.fromCharCode,i=String.fromCodePoint;r(r.S+r.F*(!!i&&1!=i.length),"String",{fromCodePoint:function(t){for(var n,e=[],r=arguments.length,i=0;i<r;){if(n=+arguments[i++],o(n,1114111)!==n)throw RangeError(n+" is not a valid code point");e.push(n<65536?u(n):u(55296+((n-=65536)>>10),n%1024+56320))}return e.join("")}})},function(t,n,e){var r=e(0),u=e(15),c=e(6);r(r.S,"String",{raw:function(t){for(var n=u(t.raw),e=c(n.length),r=arguments.length,i=[],o=0;o<e;)i.push(String(n[o++])),o<r&&i.push(String(arguments[o]));return i.join("")}})},function(t,n,e){"use strict";e(45)("trim",function(t){return function(){return t(this,3)}})},function(t,n,e){"use strict";var r=e(55)(!0);e(77)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})})},function(t,n,e){"use strict";var r=e(0),i=e(55)(!1);r(r.P,"String",{codePointAt:function(t){return i(this,t)}})},function(t,n,e){"use strict";var r=e(0),c=e(6),a=e(79),s="endsWith",f=""[s];r(r.P+r.F*e(80)(s),"String",{endsWith:function(t,n){var e=a(this,t,s),r=1<arguments.length?n:void 0,i=c(e.length),o=void 0===r?i:Math.min(c(r),i),u=String(t);return f?f.call(e,u,o):e.slice(o-u.length,o)===u}})},function(t,n,e){"use strict";var r=e(0),i=e(79),o="includes";r(r.P+r.F*e(80)(o),"String",{includes:function(t,n){return!!~i(this,t,o).indexOf(t,1<arguments.length?n:void 0)}})},function(t,n,e){var r=e(0);r(r.P,"String",{repeat:e(74)})},function(t,n,e){"use strict";var r=e(0),o=e(6),u=e(79),c="startsWith",a=""[c];r(r.P+r.F*e(80)(c),"String",{startsWith:function(t,n){var e=u(this,t,c),r=o(Math.min(1<arguments.length?n:void 0,e.length)),i=String(t);return a?a.call(e,i,r):e.slice(r,r+i.length)===i}})},function(t,n,e){"use strict";e(13)("anchor",function(n){return function(t){return n(this,"a","name",t)}})},function(t,n,e){"use strict";e(13)("big",function(t){return function(){return t(this,"big","","")}})},function(t,n,e){"use strict";e(13)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,n,e){"use strict";e(13)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,n,e){"use strict";e(13)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,n,e){"use strict";e(13)("fontcolor",function(n){return function(t){return n(this,"font","color",t)}})},function(t,n,e){"use strict";e(13)("fontsize",function(n){return function(t){return n(this,"font","size",t)}})},function(t,n,e){"use strict";e(13)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,n,e){"use strict";e(13)("link",function(n){return function(t){return n(this,"a","href",t)}})},function(t,n,e){"use strict";e(13)("small",function(t){return function(){return t(this,"small","","")}})},function(t,n,e){"use strict";e(13)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,n,e){"use strict";e(13)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,n,e){"use strict";e(13)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,n,e){var r=e(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(23);r(r.P+r.F*e(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var n=i(this),e=o(n);return"number"!=typeof e||isFinite(e)?n.toISOString():null}})},function(t,n,e){var r=e(0),i=e(243);r(r.P+r.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},function(t,n,e){"use strict";function i(t){return 9<t?t:"0"+t}var r=e(3),o=Date.prototype.getTime,u=Date.prototype.toISOString;t.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=u.call(new Date(-5e13-1))})||!r(function(){u.call(new Date(NaN))})?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var t=this,n=t.getUTCFullYear(),e=t.getUTCMilliseconds(),r=n<0?"-":9999<n?"+":"";return r+("00000"+Math.abs(n)).slice(r?-6:-4)+"-"+i(t.getUTCMonth()+1)+"-"+i(t.getUTCDate())+"T"+i(t.getUTCHours())+":"+i(t.getUTCMinutes())+":"+i(t.getUTCSeconds())+"."+(99<e?e:"0"+i(e))+"Z"}:u},function(t,n,e){var r=Date.prototype,i="Invalid Date",o="toString",u=r[o],c=r.getTime;new Date(NaN)+""!=i&&e(12)(r,o,function(){var t=c.call(this);return t==t?u.call(this):i})},function(t,n,e){var r=e(5)("toPrimitive"),i=Date.prototype;r in i||e(11)(i,r,e(246))},function(t,n,e){"use strict";var r=e(1),i=e(23);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(r(this),"number"!=t)}},function(t,n,e){var r=e(0);r(r.S,"Array",{isArray:e(54)})},function(t,n,e){"use strict";var v=e(19),r=e(0),g=e(9),d=e(109),y=e(81),m=e(6),w=e(82),b=e(83);r(r.S+r.F*!e(57)(function(t){Array.from(t)}),"Array",{from:function(t,n,e){var r,i,o,u,c=g(t),a="function"==typeof this?this:Array,s=arguments.length,f=1<s?n:void 0,h=void 0!==f,l=0,p=b(c);if(h&&(f=v(f,2<s?e:void 0,2)),null==p||a==Array&&y(p))for(i=new a(r=m(c.length));l<r;l++)w(i,l,h?f(c[l],l):c[l]);else for(u=p.call(c),i=new a;!(o=u.next()).done;l++)w(i,l,h?d(u,f,[o.value,l],!0):o.value);return i.length=l,i}})},function(t,n,e){"use strict";var r=e(0),i=e(82);r(r.S+r.F*e(3)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,n=arguments.length,e=new("function"==typeof this?this:Array)(n);t<n;)i(e,t,arguments[t++]);return e.length=n,e}})},function(t,n,e){"use strict";var r=e(0),i=e(15),o=[].join;r(r.P+r.F*(e(48)!=Object||!e(22)(o)),"Array",{join:function(t){return o.call(i(this),void 0===t?",":t)}})},function(t,n,e){"use strict";var r=e(0),i=e(70),s=e(20),f=e(35),h=e(6),l=[].slice;r(r.P+r.F*e(3)(function(){i&&l.call(i)}),"Array",{slice:function(t,n){var e=h(this.length),r=s(this);if(n=void 0===n?e:n,"Array"==r)return l.call(this,t,n);for(var i=f(t,e),o=f(n,e),u=h(o-i),c=new Array(u),a=0;a<u;a++)c[a]="String"==r?this.charAt(i+a):this[i+a];return c}})},function(t,n,e){"use strict";var r=e(0),i=e(10),o=e(9),u=e(3),c=[].sort,a=[1,2,3];r(r.P+r.F*(u(function(){a.sort(void 0)})||!u(function(){a.sort(null)})||!e(22)(c)),"Array",{sort:function(t){return void 0===t?c.call(o(this)):c.call(o(this),i(t))}})},function(t,n,e){"use strict";var r=e(0),i=e(26)(0),o=e(22)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(t,n){return i(this,t,n)}})},function(t,n,e){var r=e(4),i=e(54),o=e(5)("species");t.exports=function(t){var n;return i(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!i(n.prototype)||(n=void 0),r(n)&&null===(n=n[o])&&(n=void 0)),void 0===n?Array:n}},function(t,n,e){"use strict";var r=e(0),i=e(26)(1);r(r.P+r.F*!e(22)([].map,!0),"Array",{map:function(t,n){return i(this,t,n)}})},function(t,n,e){"use strict";var r=e(0),i=e(26)(2);r(r.P+r.F*!e(22)([].filter,!0),"Array",{filter:function(t,n){return i(this,t,n)}})},function(t,n,e){"use strict";var r=e(0),i=e(26)(3);r(r.P+r.F*!e(22)([].some,!0),"Array",{some:function(t,n){return i(this,t,n)}})},function(t,n,e){"use strict";var r=e(0),i=e(26)(4);r(r.P+r.F*!e(22)([].every,!0),"Array",{every:function(t,n){return i(this,t,n)}})},function(t,n,e){"use strict";var r=e(0),i=e(110);r(r.P+r.F*!e(22)([].reduce,!0),"Array",{reduce:function(t,n){return i(this,t,arguments.length,n,!1)}})},function(t,n,e){"use strict";var r=e(0),i=e(110);r(r.P+r.F*!e(22)([].reduceRight,!0),"Array",{reduceRight:function(t,n){return i(this,t,arguments.length,n,!0)}})},function(t,n,e){"use strict";var r=e(0),i=e(52)(!1),o=[].indexOf,u=!!o&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(u||!e(22)(o)),"Array",{indexOf:function(t,n){return u?o.apply(this,arguments)||0:i(this,t,n)}})},function(t,n,e){"use strict";var r=e(0),o=e(15),u=e(21),c=e(6),a=[].lastIndexOf,s=!!a&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(s||!e(22)(a)),"Array",{lastIndexOf:function(t,n){if(s)return a.apply(this,arguments)||0;var e=o(this),r=c(e.length),i=r-1;for(1<arguments.length&&(i=Math.min(i,u(n))),i<0&&(i=r+i);0<=i;i--)if(i in e&&e[i]===t)return i||0;return-1}})},function(t,n,e){var r=e(0);r(r.P,"Array",{copyWithin:e(111)}),e(31)("copyWithin")},function(t,n,e){var r=e(0);r(r.P,"Array",{fill:e(85)}),e(31)("fill")},function(t,n,e){"use strict";var r=e(0),i=e(26)(5),o="find",u=!0;o in[]&&Array(1)[o](function(){u=!1}),r(r.P+r.F*u,"Array",{find:function(t,n){return i(this,t,1<arguments.length?n:void 0)}}),e(31)(o)},function(t,n,e){"use strict";var r=e(0),i=e(26)(6),o="findIndex",u=!0;o in[]&&Array(1)[o](function(){u=!1}),r(r.P+r.F*u,"Array",{findIndex:function(t,n){return i(this,t,1<arguments.length?n:void 0)}}),e(31)(o)},function(t,n,e){e(38)("Array")},function(t,n,e){var r=e(2),o=e(73),i=e(8).f,u=e(37).f,c=e(56),a=e(50),s=r.RegExp,f=s,h=s.prototype,l=/a/g,p=/a/g,v=new s(l)!==l;if(e(7)&&(!v||e(3)(function(){return p[e(5)("match")]=!1,s(l)!=l||s(p)==p||"/a/i"!=s(l,"i")}))){s=function(t,n){var e=this instanceof s,r=c(t),i=void 0===n;return!e&&r&&t.constructor===s&&i?t:o(v?new f(r&&!i?t.source:t,n):f((r=t instanceof s)?t.source:t,r&&i?a.call(t):n),e?this:h,s)};function g(n){n in s||i(s,n,{configurable:!0,get:function(){return f[n]},set:function(t){f[n]=t}})}for(var d=u(f),y=0;d.length>y;)g(d[y++]);(h.constructor=s).prototype=h,e(12)(r,"RegExp",s)}e(38)("RegExp")},function(t,n,e){"use strict";e(114);function r(t){e(12)(RegExp.prototype,c,t,!0)}var i=e(1),o=e(50),u=e(7),c="toString",a=/./[c];e(3)(function(){return"/a/b"!=a.call({source:"a",flags:"b"})})?r(function(){var t=i(this);return"/".concat(t.source,"/","flags"in t?t.flags:!u&&t instanceof RegExp?o.call(t):void 0)}):a.name!=c&&r(function(){return a.call(this)})},function(t,n,e){"use strict";var h=e(1),l=e(6),p=e(88),v=e(58);e(59)("match",1,function(r,i,s,f){return[function(t){var n=r(this),e=null==t?void 0:t[i];return void 0!==e?e.call(t,n):new RegExp(t)[i](String(n))},function(t){var n=f(s,t,this);if(n.done)return n.value;var e=h(t),r=String(this);if(!e.global)return v(e,r);for(var i,o=e.unicode,u=[],c=e.lastIndex=0;null!==(i=v(e,r));){var a=String(i[0]);""===(u[c]=a)&&(e.lastIndex=p(r,l(e.lastIndex),o)),c++}return 0===c?null:u}]})},function(t,n,e){"use strict";function _(t){return void 0===t?t:String(t)}var M=e(1),r=e(9),E=e(6),P=e(21),O=e(88),I=e(58),j=Math.max,F=Math.min,l=Math.floor,p=/\$([$&`']|\d\d?|<[^>]*>)/g,v=/\$([$&`']|\d\d?)/g;e(59)("replace",2,function(i,o,b,x){return[function(t,n){var e=i(this),r=null==t?void 0:t[o];return void 0!==r?r.call(t,e,n):b.call(String(e),t,n)},function(t,n){var e=x(b,t,this,n);if(e.done)return e.value;var r=M(t),i=String(this),o="function"==typeof n;o||(n=String(n));var u=r.global;if(u){var c=r.unicode;r.lastIndex=0}for(var a=[];;){var s=I(r,i);if(null===s)break;if(a.push(s),!u)break;""===String(s[0])&&(r.lastIndex=O(i,E(r.lastIndex),c))}for(var f="",h=0,l=0;l<a.length;l++){s=a[l];for(var p=String(s[0]),v=j(F(P(s.index),i.length),0),g=[],d=1;d<s.length;d++)g.push(_(s[d]));var y=s.groups;if(o){var m=[p].concat(g,v,i);void 0!==y&&m.push(y);var w=String(n.apply(void 0,m))}else w=S(p,i,v,g,y,n);h<=v&&(f+=i.slice(h,v)+w,h=v+p.length)}return f+i.slice(h)}];function S(o,u,c,a,s,t){var f=c+o.length,h=a.length,n=v;return void 0!==s&&(s=r(s),n=p),b.call(t,n,function(t,n){var e;switch(n.charAt(0)){case"$":return"$";case"&":return o;case"`":return u.slice(0,c);case"'":return u.slice(f);case"<":e=s[n.slice(1,-1)];break;default:var r=+n;if(0==r)return t;if(h<r){var i=l(r/10);return 0===i?t:i<=h?void 0===a[i-1]?n.charAt(1):a[i-1]+n.charAt(1):t}e=a[r-1]}return void 0===e?"":e})}})},function(t,n,e){"use strict";var a=e(1),s=e(100),f=e(58);e(59)("search",1,function(r,i,u,c){return[function(t){var n=r(this),e=null==t?void 0:t[i];return void 0!==e?e.call(t,n):new RegExp(t)[i](String(n))},function(t){var n=c(u,t,this);if(n.done)return n.value;var e=a(t),r=String(this),i=e.lastIndex;s(i,0)||(e.lastIndex=0);var o=f(e,r);return s(e.lastIndex,i)||(e.lastIndex=i),null===o?-1:o.index}]})},function(t,n,e){"use strict";var h=e(56),w=e(1),b=e(51),x=e(88),S=e(6),_=e(58),l=e(87),r=e(3),M=Math.min,p=[].push,u="split",v="length",g="lastIndex",E=4294967295,P=!r(function(){RegExp(E,"y")});e(59)("split",2,function(i,o,d,y){var m;return m="c"=="abbc"[u](/(b)*/)[1]||4!="test"[u](/(?:)/,-1)[v]||2!="ab"[u](/(?:ab)*/)[v]||4!="."[u](/(.?)(.?)/)[v]||1<"."[u](/()()/)[v]||""[u](/.?/)[v]?function(t,n){var e=String(this);if(void 0===t&&0===n)return[];if(!h(t))return d.call(e,t,n);for(var r,i,o,u=[],c=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),a=0,s=void 0===n?E:n>>>0,f=new RegExp(t.source,c+"g");(r=l.call(f,e))&&!(a<(i=f[g])&&(u.push(e.slice(a,r.index)),1<r[v]&&r.index<e[v]&&p.apply(u,r.slice(1)),o=r[0][v],a=i,u[v]>=s));)f[g]===r.index&&f[g]++;return a===e[v]?!o&&f.test("")||u.push(""):u.push(e.slice(a)),u[v]>s?u.slice(0,s):u}:"0"[u](void 0,0)[v]?function(t,n){return void 0===t&&0===n?[]:d.call(this,t,n)}:d,[function(t,n){var e=i(this),r=null==t?void 0:t[o];return void 0!==r?r.call(t,e,n):m.call(String(e),t,n)},function(t,n){var e=y(m,t,this,n,m!==d);if(e.done)return e.value;var r=w(t),i=String(this),o=b(r,RegExp),u=r.unicode,c=(r.ignoreCase?"i":"")+(r.multiline?"m":"")+(r.unicode?"u":"")+(P?"y":"g"),a=new o(P?r:"^(?:"+r.source+")",c),s=void 0===n?E:n>>>0;if(0==s)return[];if(0===i.length)return null===_(a,i)?[i]:[];for(var f=0,h=0,l=[];h<i.length;){a.lastIndex=P?h:0;var p,v=_(a,P?i:i.slice(h));if(null===v||(p=M(S(a.lastIndex+(P?0:h)),i.length))===f)h=x(i,h,u);else{if(l.push(i.slice(f,h)),l.length===s)return l;for(var g=1;g<=v.length-1;g++)if(l.push(v[g]),l.length===s)return l;h=f=p}}return l.push(i.slice(f)),l}]})},function(t,n,e){"use strict";function r(){}function h(t){var n;return!(!d(t)||"function"!=typeof(n=t.then))&&n}function i(f,e){if(!f._n){f._n=!0;var r=f._c;S(function(){for(var a=f._v,s=1==f._s,t=0,n=function(t){var n,e,r,i=s?t.ok:t.fail,o=t.resolve,u=t.reject,c=t.domain;try{i?(s||(2==f._h&&D(f),f._h=1),!0===i?n=a:(c&&c.enter(),n=i(a),c&&(c.exit(),r=!0)),n===t.promise?u(I("Promise-chain cycle")):(e=h(n))?e.call(n,o,u):o(n)):u(a)}catch(t){c&&!r&&c.exit(),u(t)}};r.length>t;)n(r[t++]);f._c=[],f._n=!1,e&&!f._h&&L(f)})}}function o(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),i(n,!0))}var u,c,a,s,f=e(29),l=e(2),p=e(19),v=e(44),g=e(0),d=e(4),y=e(10),m=e(39),w=e(40),b=e(51),x=e(89).set,S=e(90)(),_=e(91),M=e(115),E=e(60),P=e(116),O="Promise",I=l.TypeError,j=l.process,F=j&&j.versions,A=F&&F.v8||"",k=l[O],R="process"==v(j),N=c=_.f,T=!!function(){try{var t=k.resolve(1),n=(t.constructor={})[e(5)("species")]=function(t){t(r,r)};return(R||"function"==typeof PromiseRejectionEvent)&&t.then(r)instanceof n&&0!==A.indexOf("6.6")&&-1===E.indexOf("Chrome/66")}catch(t){}}(),L=function(o){x.call(l,function(){var t,n,e,r=o._v,i=C(o);if(i&&(t=M(function(){R?j.emit("unhandledRejection",r,o):(n=l.onunhandledrejection)?n({promise:o,reason:r}):(e=l.console)&&e.error&&e.error("Unhandled promise rejection",r)}),o._h=R||C(o)?2:1),o._a=void 0,i&&t.e)throw t.v})},C=function(t){return 1!==t._h&&0===(t._a||t._c).length},D=function(n){x.call(l,function(){var t;R?j.emit("rejectionHandled",n):(t=l.onrejectionhandled)&&t({promise:n,reason:n._v})})},V=function(t){var e,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===t)throw I("Promise can't be resolved itself");(e=h(t))?S(function(){var n={_w:r,_d:!1};try{e.call(t,p(V,n,1),p(o,n,1))}catch(t){o.call(n,t)}}):(r._v=t,r._s=1,i(r,!1))}catch(t){o.call({_w:r,_d:!1},t)}}};T||(k=function(t){m(this,k,O,"_h"),y(t),u.call(this);try{t(p(V,this,1),p(o,this,1))}catch(t){o.call(this,t)}},(u=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=e(41)(k.prototype,{then:function(t,n){var e=N(b(this,k));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=R?j.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&i(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),a=function(){var t=new u;this.promise=t,this.resolve=p(V,t,1),this.reject=p(o,t,1)},_.f=N=function(t){return t===k||t===s?new a(t):c(t)}),g(g.G+g.W+g.F*!T,{Promise:k}),e(43)(k,O),e(38)(O),s=e(18)[O],g(g.S+g.F*!T,O,{reject:function(t){var n=N(this);return(0,n.reject)(t),n.promise}}),g(g.S+g.F*(f||!T),O,{resolve:function(t){return P(f&&this===s?k:this,t)}}),g(g.S+g.F*!(T&&e(57)(function(t){k.all(t).catch(r)})),O,{all:function(t){var u=this,n=N(u),c=n.resolve,a=n.reject,e=M(function(){var r=[],i=0,o=1;w(t,!1,function(t){var n=i++,e=!1;r.push(void 0),o++,u.resolve(t).then(function(t){e||(e=!0,r[n]=t,--o||c(r))},a)}),--o||c(r)});return e.e&&a(e.v),n.promise},race:function(t){var n=this,e=N(n),r=e.reject,i=M(function(){w(t,!1,function(t){n.resolve(t).then(e.resolve,r)})});return i.e&&r(i.v),e.promise}})},function(t,n,e){"use strict";var r=e(121),i=e(42),o="WeakSet";e(61)(o,function(n){return function(t){return n(this,0<arguments.length?t:void 0)}},{add:function(t){return r.def(i(this,o),t,!0)}},r,!1,!0)},function(t,n,e){"use strict";var r=e(0),i=e(62),o=e(92),s=e(1),f=e(35),h=e(6),u=e(4),c=e(2).ArrayBuffer,l=e(51),p=o.ArrayBuffer,v=o.DataView,a=i.ABV&&c.isView,g=p.prototype.slice,d=i.VIEW,y="ArrayBuffer";r(r.G+r.W+r.F*(c!==p),{ArrayBuffer:p}),r(r.S+r.F*!i.CONSTR,y,{isView:function(t){return a&&a(t)||u(t)&&d in t}}),r(r.P+r.U+r.F*e(3)(function(){return!new p(2).slice(1,void 0).byteLength}),y,{slice:function(t,n){if(void 0!==g&&void 0===n)return g.call(s(this),t);for(var e=s(this).byteLength,r=f(t,e),i=f(void 0===n?e:n,e),o=new(l(this,p))(h(i-r)),u=new v(this),c=new v(o),a=0;r<i;)c.setUint8(a++,u.getUint8(r++));return o}}),e(38)(y)},function(t,n,e){var r=e(0);r(r.G+r.W+r.F*!e(62).ABV,{DataView:e(92).DataView})},function(t,n,e){e(27)("Int8",1,function(r){return function(t,n,e){return r(this,t,n,e)}})},function(t,n,e){e(27)("Uint8",1,function(r){return function(t,n,e){return r(this,t,n,e)}})},function(t,n,e){e(27)("Uint8",1,function(r){return function(t,n,e){return r(this,t,n,e)}},!0)},function(t,n,e){e(27)("Int16",2,function(r){return function(t,n,e){return r(this,t,n,e)}})},function(t,n,e){e(27)("Uint16",2,function(r){return function(t,n,e){return r(this,t,n,e)}})},function(t,n,e){e(27)("Int32",4,function(r){return function(t,n,e){return r(this,t,n,e)}})},function(t,n,e){e(27)("Uint32",4,function(r){return function(t,n,e){return r(this,t,n,e)}})},function(t,n,e){e(27)("Float32",4,function(r){return function(t,n,e){return r(this,t,n,e)}})},function(t,n,e){e(27)("Float64",8,function(r){return function(t,n,e){return r(this,t,n,e)}})},function(t,n,e){var r=e(0),o=e(10),u=e(1),c=(e(2).Reflect||{}).apply,a=Function.apply;r(r.S+r.F*!e(3)(function(){c(function(){})}),"Reflect",{apply:function(t,n,e){var r=o(t),i=u(e);return c?c(r,n,i):a.call(r,n,i)}})},function(t,n,e){var r=e(0),a=e(36),s=e(10),f=e(1),h=e(4),i=e(3),l=e(101),p=(e(2).Reflect||{}).construct,v=i(function(){function t(){}return!(p(function(){},[],t)instanceof t)}),g=!i(function(){p(function(){})});r(r.S+r.F*(v||g),"Reflect",{construct:function(t,n,e){s(t),f(n);var r=arguments.length<3?t:s(e);if(g&&!v)return p(t,n,r);if(t==r){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var i=[null];return i.push.apply(i,n),new(l.apply(t,i))}var o=r.prototype,u=a(h(o)?o:Object.prototype),c=Function.apply.call(t,u,n);return h(c)?c:u}})},function(t,n,e){var r=e(8),i=e(0),o=e(1),u=e(23);i(i.S+i.F*e(3)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,n,e){o(t),n=u(n,!0),o(e);try{return r.f(t,n,e),!0}catch(t){return!1}}})},function(t,n,e){var r=e(0),i=e(16).f,o=e(1);r(r.S,"Reflect",{deleteProperty:function(t,n){var e=i(o(t),n);return!(e&&!e.configurable)&&delete t[n]}})},function(t,n,e){"use strict";function r(t){this._t=o(t),this._i=0;var n,e=this._k=[];for(n in t)e.push(n)}var i=e(0),o=e(1);e(78)(r,"Object",function(){var t,n=this._k;do{if(this._i>=n.length)return{value:void 0,done:!0}}while(!((t=n[this._i++])in this._t));return{value:t,done:!1}}),i(i.S,"Reflect",{enumerate:function(t){return new r(t)}})},function(t,n,e){var u=e(16),c=e(17),a=e(14),r=e(0),s=e(4),f=e(1);r(r.S,"Reflect",{get:function t(n,e){var r,i,o=arguments.length<3?n:arguments[2];return f(n)===o?n[e]:(r=u.f(n,e))?a(r,"value")?r.value:void 0!==r.get?r.get.call(o):void 0:s(i=c(n))?t(i,e,o):void 0}})},function(t,n,e){var r=e(16),i=e(0),o=e(1);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,n){return r.f(o(t),n)}})},function(t,n,e){var r=e(0),i=e(17),o=e(1);r(r.S,"Reflect",{getPrototypeOf:function(t){return i(o(t))}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{has:function(t,n){return n in t}})},function(t,n,e){var r=e(0),i=e(1),o=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return i(t),!o||o(t)}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{ownKeys:e(123)})},function(t,n,e){var r=e(0),i=e(1),o=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){i(t);try{return o&&o(t),!0}catch(t){return!1}}})},function(t,n,e){var a=e(8),s=e(16),f=e(17),h=e(14),r=e(0),l=e(32),p=e(1),v=e(4);r(r.S,"Reflect",{set:function t(n,e,r){var i,o,u=arguments.length<4?n:arguments[3],c=s.f(p(n),e);if(!c){if(v(o=f(n)))return t(o,e,r,u);c=l(0)}if(h(c,"value")){if(!1===c.writable||!v(u))return!1;if(i=s.f(u,e)){if(i.get||i.set||!1===i.writable)return!1;i.value=r,a.f(u,e,i)}else a.f(u,e,l(0,r));return!0}return void 0!==c.set&&(c.set.call(u,r),!0)}})},function(t,n,e){var r=e(0),i=e(71);i&&r(r.S,"Reflect",{setPrototypeOf:function(t,n){i.check(t,n);try{return i.set(t,n),!0}catch(t){return!1}}})},function(t,n,e){"use strict";var r=e(0),i=e(52)(!0);r(r.P,"Array",{includes:function(t,n){return i(this,t,1<arguments.length?n:void 0)}}),e(31)("includes")},function(t,n,e){"use strict";var r=e(0),o=e(124),u=e(9),c=e(6),a=e(10),s=e(84);r(r.P,"Array",{flatMap:function(t,n){var e,r,i=u(this);return a(t),e=c(i.length),r=s(i,0),o(r,i,i,e,0,1,t,n),r}}),e(31)("flatMap")},function(t,n,e){"use strict";var r=e(0),o=e(124),u=e(9),c=e(6),a=e(21),s=e(84);r(r.P,"Array",{flatten:function(t){var n=t,e=u(this),r=c(e.length),i=s(e,0);return o(i,e,e,r,0,void 0===n?1:a(n)),i}}),e(31)("flatten")},function(t,n,e){"use strict";var r=e(0),i=e(55)(!0);r(r.P,"String",{at:function(t){return i(this,t)}})},function(t,n,e){"use strict";var r=e(0),i=e(125),o=e(60),u=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(o);r(r.P+r.F*u,"String",{padStart:function(t,n){return i(this,t,1<arguments.length?n:void 0,!0)}})},function(t,n,e){"use strict";var r=e(0),i=e(125),o=e(60),u=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(o);r(r.P+r.F*u,"String",{padEnd:function(t,n){return i(this,t,1<arguments.length?n:void 0,!1)}})},function(t,n,e){"use strict";e(45)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,n,e){"use strict";e(45)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,n,e){"use strict";function i(t,n){this._r=t,this._s=n}var r=e(0),o=e(24),u=e(6),c=e(56),a=e(50),s=RegExp.prototype;e(78)(i,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),r(r.P,"String",{matchAll:function(t){if(o(this),!c(t))throw TypeError(t+" is not a regexp!");var n=String(this),e="flags"in s?String(t.flags):a.call(t),r=new RegExp(t.source,~e.indexOf("g")?e:"g"+e);return r.lastIndex=u(t.lastIndex),new i(r,n)}})},function(t,n,e){e(67)("asyncIterator")},function(t,n,e){e(67)("observable")},function(t,n,e){var r=e(0),a=e(123),s=e(15),f=e(16),h=e(82);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var n,e,r=s(t),i=f.f,o=a(r),u={},c=0;o.length>c;)void 0!==(e=i(r,n=o[c++]))&&h(u,n,e);return u}})},function(t,n,e){var r=e(0),i=e(126)(!1);r(r.S,"Object",{values:function(t){return i(t)}})},function(t,n,e){var r=e(0),i=e(126)(!0);r(r.S,"Object",{entries:function(t){return i(t)}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(10),u=e(8);e(7)&&r(r.P+e(63),"Object",{__defineGetter__:function(t,n){u.f(i(this),t,{get:o(n),enumerable:!0,configurable:!0})}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(10),u=e(8);e(7)&&r(r.P+e(63),"Object",{__defineSetter__:function(t,n){u.f(i(this),t,{set:o(n),enumerable:!0,configurable:!0})}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(23),u=e(17),c=e(16).f;e(7)&&r(r.P+e(63),"Object",{__lookupGetter__:function(t){var n,e=i(this),r=o(t,!0);do{if(n=c(e,r))return n.get}while(e=u(e))}})},function(t,n,e){"use strict";var r=e(0),i=e(9),o=e(23),u=e(17),c=e(16).f;e(7)&&r(r.P+e(63),"Object",{__lookupSetter__:function(t){var n,e=i(this),r=o(t,!0);do{if(n=c(e,r))return n.set}while(e=u(e))}})},function(t,n,e){var r=e(0);r(r.P+r.R,"Map",{toJSON:e(127)("Map")})},function(t,n,e){var r=e(0);r(r.P+r.R,"Set",{toJSON:e(127)("Set")})},function(t,n,e){e(64)("Map")},function(t,n,e){e(64)("Set")},function(t,n,e){e(64)("WeakMap")},function(t,n,e){e(64)("WeakSet")},function(t,n,e){e(65)("Map")},function(t,n,e){e(65)("Set")},function(t,n,e){e(65)("WeakMap")},function(t,n,e){e(65)("WeakSet")},function(t,n,e){var r=e(0);r(r.G,{global:e(2)})},function(t,n,e){var r=e(0);r(r.S,"System",{global:e(2)})},function(t,n,e){var r=e(0),i=e(20);r(r.S,"Error",{isError:function(t){return"Error"===i(t)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{clamp:function(t,n,e){return Math.min(e,Math.max(n,t))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(t,n,e){var r=e(0),i=180/Math.PI;r(r.S,"Math",{degrees:function(t){return t*i}})},function(t,n,e){var r=e(0),o=e(129),u=e(108);r(r.S,"Math",{fscale:function(t,n,e,r,i){return u(o(t,n,e,r,i))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{iaddh:function(t,n,e,r){var i=t>>>0,o=e>>>0;return(n>>>0)+(r>>>0)+((i&o|(i|o)&~(i+o>>>0))>>>31)|0}})},function(t,n,e){var r=e(0);r(r.S,"Math",{isubh:function(t,n,e,r){var i=t>>>0,o=e>>>0;return(n>>>0)-(r>>>0)-((~i&o|~(i^o)&i-o>>>0)>>>31)|0}})},function(t,n,e){var r=e(0);r(r.S,"Math",{imulh:function(t,n){var e=+t,r=+n,i=65535&e,o=65535&r,u=e>>16,c=r>>16,a=(u*o>>>0)+(i*o>>>16);return u*c+(a>>16)+((i*c>>>0)+(65535&a)>>16)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(t,n,e){var r=e(0),i=Math.PI/180;r(r.S,"Math",{radians:function(t){return t*i}})},function(t,n,e){var r=e(0);r(r.S,"Math",{scale:e(129)})},function(t,n,e){var r=e(0);r(r.S,"Math",{umulh:function(t,n){var e=+t,r=+n,i=65535&e,o=65535&r,u=e>>>16,c=r>>>16,a=(u*o>>>0)+(i*o>>>16);return u*c+(a>>>16)+((i*c>>>0)+(65535&a)>>>16)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:0<t}})},function(t,n,e){"use strict";var r=e(0),i=e(18),o=e(2),u=e(51),c=e(116);r(r.P+r.R,"Promise",{finally:function(n){var e=u(this,i.Promise||o.Promise),t="function"==typeof n;return this.then(t?function(t){return c(e,n()).then(function(){return t})}:n,t?function(t){return c(e,n()).then(function(){throw t})}:n)}})},function(t,n,e){"use strict";var r=e(0),i=e(91),o=e(115);r(r.S,"Promise",{try:function(t){var n=i.f(this),e=o(t);return(e.e?n.reject:n.resolve)(e.v),n.promise}})},function(t,n,e){var r=e(28),i=e(1),o=r.key,u=r.set;r.exp({defineMetadata:function(t,n,e,r){u(t,n,i(e),o(r))}})},function(t,n,e){var r=e(28),u=e(1),c=r.key,a=r.map,s=r.store;r.exp({deleteMetadata:function(t,n,e){var r=arguments.length<3?void 0:c(e),i=a(u(n),r,!1);if(void 0===i||!i.delete(t))return!1;if(i.size)return!0;var o=s.get(n);return o.delete(r),!!o.size||s.delete(n)}})},function(t,n,e){var r=e(28),i=e(1),o=e(17),u=r.has,c=r.get,a=r.key,s=function(t,n,e){if(u(t,n,e))return c(t,n,e);var r=o(n);return null!==r?s(t,r,e):void 0};r.exp({getMetadata:function(t,n,e){return s(t,i(n),arguments.length<3?void 0:a(e))}})},function(t,n,e){var o=e(119),u=e(128),r=e(28),i=e(1),c=e(17),a=r.keys,s=r.key,f=function(t,n){var e=a(t,n),r=c(t);if(null===r)return e;var i=f(r,n);return i.length?e.length?u(new o(e.concat(i))):i:e};r.exp({getMetadataKeys:function(t,n){return f(i(t),arguments.length<2?void 0:s(n))}})},function(t,n,e){var r=e(28),i=e(1),o=r.get,u=r.key;r.exp({getOwnMetadata:function(t,n,e){return o(t,i(n),arguments.length<3?void 0:u(e))}})},function(t,n,e){var r=e(28),i=e(1),o=r.keys,u=r.key;r.exp({getOwnMetadataKeys:function(t,n){return o(i(t),arguments.length<2?void 0:u(n))}})},function(t,n,e){var r=e(28),i=e(1),o=e(17),u=r.has,c=r.key,a=function(t,n,e){if(u(t,n,e))return!0;var r=o(n);return null!==r&&a(t,r,e)};r.exp({hasMetadata:function(t,n,e){return a(t,i(n),arguments.length<3?void 0:c(e))}})},function(t,n,e){var r=e(28),i=e(1),o=r.has,u=r.key;r.exp({hasOwnMetadata:function(t,n,e){return o(t,i(n),arguments.length<3?void 0:u(e))}})},function(t,n,e){var r=e(28),i=e(1),o=e(10),u=r.key,c=r.set;r.exp({metadata:function(e,r){return function(t,n){c(e,r,(void 0!==n?i:o)(t),u(n))}}})},function(t,n,e){var r=e(0),i=e(90)(),o=e(2).process,u="process"==e(20)(o);r(r.G,{asap:function(t){var n=u&&o.domain;i(n?n.bind(t):t)}})},function(t,n,e){"use strict";function i(t){return null==t?void 0:p(t)}function o(t){var n=t._c;n&&(t._c=void 0,n())}function u(t){return void 0===t._o}function c(t){u(t)||(t._o=void 0,o(t))}function r(n,t){v(n),this._c=void 0,this._o=n,n=new b(this);try{var e=t(n),r=e;null!=e&&("function"==typeof e.unsubscribe?e=function(){r.unsubscribe()}:p(e),this._c=e)}catch(t){return void n.error(t)}u(this)&&o(this)}var a=e(0),s=e(2),f=e(18),h=e(90)(),l=e(5)("observable"),p=e(10),v=e(1),g=e(39),d=e(41),y=e(11),m=e(40),w=m.RETURN;r.prototype=d({},{unsubscribe:function(){c(this)}});var b=function(t){this._s=t};b.prototype=d({},{next:function(t){var n=this._s;if(!u(n)){var e=n._o;try{var r=i(e.next);if(r)return r.call(e,t)}catch(t){try{c(n)}finally{throw t}}}},error:function(t){var n=this._s;if(u(n))throw t;var e=n._o;n._o=void 0;try{var r=i(e.error);if(!r)throw t;t=r.call(e,t)}catch(t){try{o(n)}finally{throw t}}return o(n),t},complete:function(t){var n=this._s;if(!u(n)){var e=n._o;n._o=void 0;try{var r=i(e.complete);t=r?r.call(e,t):void 0}catch(t){try{o(n)}finally{throw t}}return o(n),t}}});var x=function(t){g(this,x,"Observable","_f")._f=p(t)};d(x.prototype,{subscribe:function(t){return new r(t,this._f)},forEach:function(r){var i=this;return new(f.Promise||s.Promise)(function(t,n){p(r);var e=i.subscribe({next:function(t){try{return r(t)}catch(t){n(t),e.unsubscribe()}},error:n,complete:t})})}}),d(x,{from:function(t){var n="function"==typeof this?this:x,e=i(v(t)[l]);if(e){var r=v(e.call(t));return r.constructor===n?r:new n(function(t){return r.subscribe(t)})}return new n(function(n){var e=!1;return h(function(){if(!e){try{if(m(t,!1,function(t){if(n.next(t),e)return w})===w)return}catch(t){if(e)throw t;return void n.error(t)}n.complete()}}),function(){e=!0}})},of:function(){for(var t=0,n=arguments.length,r=new Array(n);t<n;)r[t]=arguments[t++];return new("function"==typeof this?this:x)(function(n){var e=!1;return h(function(){if(!e){for(var t=0;t<r.length;++t)if(n.next(r[t]),e)return;n.complete()}}),function(){e=!0}})}}),y(x.prototype,l,function(){return this}),a(a.G,{Observable:x}),e(38)("Observable")},function(t,n,e){function r(i){return function(t,n){var e=2<arguments.length,r=e&&c.call(arguments,2);return i(e?function(){("function"==typeof t?t:Function(t)).apply(this,r)}:t,n)}}var i=e(2),o=e(0),u=e(60),c=[].slice,a=/MSIE .\./.test(u);o(o.G+o.B+o.F*a,{setTimeout:r(i.setTimeout),setInterval:r(i.setInterval)})},function(t,n,e){var r=e(0),i=e(89);r(r.G+r.B,{setImmediate:i.set,clearImmediate:i.clear})},function(t,n,e){for(var r=e(86),i=e(34),o=e(12),u=e(2),c=e(11),a=e(46),s=e(5),f=s("iterator"),h=s("toStringTag"),l=a.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},v=i(p),g=0;g<v.length;g++){var d,y=v[g],m=p[y],w=u[y],b=w&&w.prototype;if(b&&(b[f]||c(b,f,l),b[h]||c(b,h,y),a[y]=l,m))for(d in r)b[d]||o(b,d,r[d],!0)}},function(k,t,n){(function(t){!function(t){"use strict";var a,n=Object.prototype,s=n.hasOwnProperty,e="function"==typeof Symbol?Symbol:{},i=e.iterator||"@@iterator",r=e.asyncIterator||"@@asyncIterator",o=e.toStringTag||"@@toStringTag",u="object"==typeof k,c=t.regeneratorRuntime;if(c)u&&(k.exports=c);else{(c=t.regeneratorRuntime=u?k.exports:{}).wrap=w;var f="suspendedStart",h="suspendedYield",l="executing",p="completed",v={},g={};g[i]=function(){return this};var d=Object.getPrototypeOf,y=d&&d(d(F([])));y&&y!==n&&s.call(y,i)&&(g=y);var m=_.prototype=x.prototype=Object.create(g);S.prototype=m.constructor=_,_.constructor=S,_[o]=S.displayName="GeneratorFunction",c.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===S||"GeneratorFunction"===(n.displayName||n.name))},c.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,_):(t.__proto__=_,o in t||(t[o]="GeneratorFunction")),t.prototype=Object.create(m),t},c.awrap=function(t){return{__await:t}},M(E.prototype),E.prototype[r]=function(){return this},c.AsyncIterator=E,c.async=function(t,n,e,r){var i=new E(w(t,n,e,r));return c.isGeneratorFunction(n)?i:i.next().then(function(t){return t.done?t.value:i.next()})},M(m),m[o]="Generator",m[i]=function(){return this},m.toString=function(){return"[object Generator]"},c.keys=function(e){var r=[];for(var t in e)r.push(t);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},c.values=F,j.prototype={constructor:j,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=a,this.done=!1,this.delegate=null,this.method="next",this.arg=a,this.tryEntries.forEach(I),!t)for(var n in this)"t"===n.charAt(0)&&s.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=a)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function t(t,n){return o.type="throw",o.arg=e,r.next=t,n&&(r.method="next",r.arg=a),!!n}for(var n=this.tryEntries.length-1;0<=n;--n){var i=this.tryEntries[n],o=i.completion;if("root"===i.tryLoc)return t("end");if(i.tryLoc<=this.prev){var u=s.call(i,"catchLoc"),c=s.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return t(i.catchLoc,!0);if(this.prev<i.finallyLoc)return t(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return t(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return t(i.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;0<=e;--e){var r=this.tryEntries[e];if(r.tryLoc<=this.prev&&s.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=t,o.arg=n,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(o)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),v},finish:function(t){for(var n=this.tryEntries.length-1;0<=n;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),I(e),v}},catch:function(t){for(var n=this.tryEntries.length-1;0<=n;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var i=r.arg;I(e)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,e){return this.delegate={iterator:F(t),resultName:n,nextLoc:e},"next"===this.method&&(this.arg=a),v}}}function w(t,n,e,r){var i=n&&n.prototype instanceof x?n:x,o=Object.create(i.prototype),u=new j(r||[]);return o._invoke=function(o,u,c){var a=f;return function(t,n){if(a===l)throw new Error("Generator is already running");if(a===p){if("throw"===t)throw n;return A()}for(c.method=t,c.arg=n;;){var e=c.delegate;if(e){var r=P(e,c);if(r){if(r===v)continue;return r}}if("next"===c.method)c.sent=c._sent=c.arg;else if("throw"===c.method){if(a===f)throw a=p,c.arg;c.dispatchException(c.arg)}else"return"===c.method&&c.abrupt("return",c.arg);a=l;var i=b(o,u,c);if("normal"===i.type){if(a=c.done?p:h,i.arg===v)continue;return{value:i.arg,done:c.done}}"throw"===i.type&&(a=p,c.method="throw",c.arg=i.arg)}}}(t,e,u),o}function b(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}function x(){}function S(){}function _(){}function M(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function E(c){function a(t,n,e,r){var i=b(c[t],c,n);if("throw"!==i.type){var o=i.arg,u=o.value;return u&&"object"==typeof u&&s.call(u,"__await")?Promise.resolve(u.__await).then(function(t){a("next",t,e,r)},function(t){a("throw",t,e,r)}):Promise.resolve(u).then(function(t){o.value=t,e(o)},r)}r(i.arg)}var n;"object"==typeof t.process&&t.process.domain&&(a=t.process.domain.bind(a)),this._invoke=function(e,r){function t(){return new Promise(function(t,n){a(e,r,t,n)})}return n=n?n.then(t,t):t()}}function P(t,n){var e=t.iterator[n.method];if(e===a){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=a,P(t,n),"throw"===n.method))return v;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var r=b(e,t.iterator,n.arg);if("throw"===r.type)return n.method="throw",n.arg=r.arg,n.delegate=null,v;var i=r.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=a),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function O(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function I(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function j(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(O,this),this.reset(!0)}function F(n){if(n){var t=n[i];if(t)return t.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var e=-1,r=function t(){for(;++e<n.length;)if(s.call(n,e))return t.value=n[e],t.done=!1,t;return t.value=a,t.done=!0,t};return r.next=r}}return{next:A}}function A(){return{value:a,done:!0}}}("object"==typeof t?t:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,n(93))},function(t,n,e){e(362),t.exports=e(18).RegExp.escape},function(t,n,e){var r=e(0),i=e(363)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(t){return i(t)}})},function(t,n){t.exports=function(n,e){var r=e===Object(e)?function(t){return e[t]}:e;return function(t){return String(t).replace(n,r)}}},function(t,n,e){},function(t,n,e){"use strict";e.r(n);e(130),e(131),e(132),e(133),e(134),e(135),e(136),e(137),e(138),e(139),e(140),e(141),e(142),e(143),e(144),e(145),e(146),e(147),e(148),e(149),e(150),e(151),e(152),e(153),e(154),e(155),e(156),e(157),e(158),e(159),e(160),e(161),e(162),e(364);var r=function(){function t(t,n,e,r,i,o,u){this.name=t,this.active=!1,this.x=n,this.y=e,this.width=r,this.height=i,this.texture=new Image,this.texture.src=o,this.isShow=u}return t.prototype.containsPoint=function(t,n){return!!this.isShow&&!(t<this.x||t>this.x+this.width||n<this.y||n>this.y+this.width)},t.prototype.draw=function(){this.isShow&&(this.active&&(j.buffer.globalAlpha=.67),j.buffer.drawImage(this.texture,this.x,this.y,this.width,this.height),j.buffer.globalAlpha=1)},t}(),u={restart:!1,up:!1,left:!1,right:!1,space:!1,leftMousePressed:!1,rihghtMousePressed:!1,buttons:[new r("restart",192,272,256,128,"/images/restart.png",!1),new r("jump",352,672,256,128,"/images/jump.png",!0),new r("left",32,672,128,128,"/images/left.png",!0),new r("right",192,672,128,128,"/images/right.png",!0),new r("start",192,382,256,128,"/images/start.png",!1)],testButtons:function(t){var n,e,r,i,o=Math.max(j.buffer_output_ratio,1);for(e=u.buttons.length-1;-1<e;--e)for((n=u.buttons[e]).active=!1,u[n.name]=!1,r=t.length-1;-1<r;--r)if(i=t[r],n.containsPoint((i.clientX-j.boundingRectangle.left)*o,(i.clientY-j.boundingRectangle.top)*o)){n.active=!0,u[n.name]=!0;break}},testButtonsClick:function(t){for(var n=Math.max(j.buffer_output_ratio,1),e=u.buttons.length-1;-1<e;--e){var r=u.buttons[e];r.active=!1,u[r.name]=!1,r.containsPoint((t.clientX-j.boundingRectangle.left)*n,(t.clientY-j.boundingRectangle.top)*n)&&("mousedown"===t.type?(r.active=!0,u[r.name]=!0):(r.active=!1,u[r.name]=!1))}},touchEnd:function(t){t.preventDefault(),u.testButtons(t.targetTouches)},touchMove:function(t){t.preventDefault(),u.testButtons(t.targetTouches)},touchStart:function(t){t.preventDefault(),u.testButtons(t.targetTouches)},keyListener:function(t){var n="keydown"===t.type;j.buffer.canvas.getBoundingClientRect();switch(t.keyCode){case 82:case 13:u.restart=n;break;case 37:u.left=n;break;case 39:u.right=n;break;case 38:case 32:u.up=n;break;case 40:u.down=n}switch(t.type){case"mousedown":case"mouseup":u.testButtonsClick(t)}}},i=function(){function t(t,n,e,r,i,o,u,c){this.text=n||"NULL",this.textSize=e||30,this.font=r||"sans-serif",this.color=i||"white",this.positionX=o||30,this.positionY=u||30,this.clickable=c||!1}return t.prototype.increment=function(){if(/^(\-|\+)?([0-9]+(\.[0-9]+)?|Infinity)$/.test(this.text)){var t=parseInt(this.text,0);t+=1,this.text=String(t)}},t.prototype.decrement=function(){if(/^(\-|\+)?([0-9]+(\.[0-9]+)?|Infinity)$/.test(this.text)){var t=parseInt(this.text,0);t-=1,this.text=String(t)}},t.prototype.draw=function(){j.buffer.font=this.textSize+"px "+this.font,j.buffer.fillStyle=this.color,j.buffer.fillText(this.text,this.positionX,this.positionY)},t}();function o(t,n){var e=t-.5+Math.random()*(n-t+1);return e=Math.abs(Math.round(e))}function c(){return window.performance&&window.performance.now?window.performance.now():(new Date).getTime()}for(var a=[],s=0;s<19;s++){var f=new Image;f.src="/images/"+s+".png",a.push(f)}var h=new Image;h.src="/images/BG.png",a.push(h);var l=new Image;l.src="/images/Tree_1.png";var p=new Image;p.src="/images/Tree_2.png";var v=new Image;v.src="/images/Tree_3.png";var g=new Image;g.src="/images/icon-petshop.png";var d=[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,16,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,3,0,1,2,2],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,15,16,0,0,0,0,0,0,14,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,16,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1,2,2,3,0,0,1,2],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,15,16,0,0,0,0,0,0,14,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,3,0,0,1,2],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,15,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,1,2,2,3,0,1,2],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,15,16,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,0,0,1,3,0,1,2],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,15,15,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,0,1,3,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,15,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,16,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,16,0,0,0,14,15,15,15,16,0,0,0,0,0,0,0,0,0,0,2,3,0,0,1,3,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,16,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,15,15,16,0,0,14,16,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,0,1,2,2,2,2],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,18,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,15,15,15,16,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,3,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,16,0,0,14,16,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,15,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,0,0,1,2,2,2,2],[0,0,0,0,0,0,0,0,0,99,0,0,0,0,14,15,15,15,15,16,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,14,16,0,0,0,0,0,0,14,16,0,0,18,0,0,0,14,16,0,0,0,0,0,0,14,16,0,0,0,0,0,0,2,3,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2]],y=[[{texture:l,coords:[100,440],size:[114,140]},{texture:v,coords:[340,440],size:[114,140]}],[],[{texture:l,coords:[200,440],size:[114,140]}],[{texture:p,coords:[200,440],size:[114,140]}],[{texture:v,coords:[200,440],size:[114,140]}],[],[],[],[{texture:v,coords:[10,440],size:[114,140]},{texture:p,coords:[260,440],size:[114,140]},{texture:l,coords:[390,440],size:[114,140]}],[],[],[{texture:p,coords:[290,440],size:[114,140]},{texture:l,coords:[490,440],size:[114,140]}],[],[]],m=function(){return function(){var c=this;this.startNewGame=function(){c.mapParts=[1,o(2,d.length-1),o(2,d.length-1)],c.mapPartsArr=[d[1].slice(),d[c.mapParts[1]].slice(),d[c.mapParts[2]].slice()],c.mapStartX=0,c.mapDifficultyMultipler=0,c.speed=3,c.globalShift=0,c.globalBackShift=0},this._addScreen=function(){c.mapParts.shift(),c.mapPartsArr.shift(),c.globalShift=-1,c.mapParts.push(o(0,d.length-1)),c.mapPartsArr.push(d[c.mapParts[2]].slice()),c._addStar()},this._addStar=function(){var t=o(0,19);0===c.mapPartsArr[c.mapPartsArr.length-1][t]&&c.mapPartsArr[2].some(function(t){return 99!==t})&&o(1,10)<6&&(c.mapPartsArr[c.mapPartsArr.length-1][t]=99)},this._addBone=function(){},this.drawMap=function(){j.buffer.fillStyle="#8ed0ff",j.buffer.fillRect(0,0,j.buffer.canvas.width,j.buffer.canvas.width),j.buffer.drawImage(a[19],c.globalBackShift,0,1920,10*O),j.buffer.drawImage(a[19],c.globalBackShift+1920,0,1920,10*O),c.globalBackShift<=-1920&&(c.globalBackShift=0);for(var t=0;t<c.mapPartsArr.length-1;t++){for(var n=c.mapPartsArr[t],e=y[c.mapParts[t]],r=10*O*t,i=0;i<10;i++)j.buffer.drawImage(a[17],i%10*O+r+c.globalShift,9.5*O,O,O);for(i=0;i<e.length;i++){var o=e[i];j.buffer.drawImage(o.texture,o.coords[0]+r+c.globalShift,o.coords[1],o.size[0],o.size[1])}for(var u=0;u<n.length;u++)0<n[u]&&99!==n[u]&&j.buffer.drawImage(a[n[u]],u%10*O+r+c.globalShift,Math.floor(u/10)*O,O,O),99===n[u]&&j.buffer.drawImage(g,u%10*O+r+c.globalShift,Math.floor(u/10)*O,O,O)}c.globalShift-=c.speed,c.globalBackShift-=1.2*c.speed+.5,c.globalShift<-10*O&&c._addScreen(),Math.random()<1-Math.pow(.993,c.mapDifficultyMultipler%200/280)&&c.speed<=10&&(c.speed+=.4)},this.mapParts=[1,o(2,d.length-1),o(2,d.length-1)],this.mapPartsArr=[d[this.mapParts[0]].slice(),d[this.mapParts[1]].slice(),d[this.mapParts[2]].slice()],this.mapStartX=0,this.mapDifficultyMultipler=0,this.speed=0,this.globalShift=0,this.globalBackShift=0}}(),w=function(){return function(t,n){this.change=function(t,n){void 0===n&&(n=15),this.frameSet!==t&&(this.count=0,this.delay=n,this.frameIndex=0,this.frameSet=t,this.frame=this.frameSet[this.frameIndex])},this.update=function(){this.count++,this.count>=this.delay&&(this.count=0,this.frameIndex=this.frameIndex===this.frameSet.length-1?0:this.frameIndex+1,this.frame=this.frameSet[this.frameIndex])},this.count=0,this.delay=n,this.frame=0,this.frameIndex=0,this.frameSet=t}}(),b=function(){function t(t){var r=this;this.spriteSheet={frame_sets:[[0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,2,1,2,1],[5,5,5,5,3,4,3,4,3,4,3,4],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,6,5,5,5,5,5,5,5,5,5,5,5,3,4,3,4,3,4,5,5,7,8,7,8,7,8,7,8,7,8,7,8,7,8]],image:new Image},this.startNewGame=function(){r.x=50,r.y=100,r.score=0,r.isDead=!1,r.animation.change(r.spriteSheet.frame_sets[0],5),r.controller.buttons[0].isShow=!1,r.controller.buttons[1].isShow=!0,r.controller.buttons[2]&&(r.controller.buttons[2].isShow=!0),r.controller.buttons[3]&&(r.controller.buttons[3].isShow=!0)},this.width=79,this.height=53,this.x=50,this.y=524,this.oldY=this.y,this.speed=1,this.xVelocity=0,this.yVelocity=0,this.jumping=!0,this.isRun=!0,this.isDead=!1,this.score=0,this.controller=u,this.texture=new Image,this.texture.src="/images/dog.png",this.soundDin=new Audio("../audio/din.mp3"),this.soundDin.volume=.1,this.soundJump=new Audio("../audio/jump.mp3"),this.soundJump.volume=.7,this.collisionModel=[[7,10,38,43],[38,0,25,40],[38,10,40,16],[3,0,4,40]],this.animation=new w,this.collision={1:function(t,n,e){r.collision.topCollision(t,n)},topCollision:function(t,n){if(0<t.yVelocity){var e=n*O;if(t.y+t.height>e&&t.oldY+t.height<=e)return t.jumping=!1,t.yVelocity=0,t.oldY=t.y=e-t.height-.01,!0}return!1}}}return Object.defineProperty(t.prototype,"bottom",{get:function(){return this.y+this.collisionModel[0][1]+this.collisionModel[0][3]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"left",{get:function(){return this.x+this.collisionModel[0][0]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"top",{get:function(){return this.y+this.collisionModel[0][1]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"right",{get:function(){return this.x+this.collisionModel[0][0]+this.collisionModel[0][3]},enumerable:!0,configurable:!0}),t.prototype._testPlatformCollision=function(t){return!(this.top>t.y+t.height||this.right<t.x||this.bottom<t.y||this.left>t.x+t.width)},t.prototype._testRectanglesCollision=function(t,n){return!(t.x+t.width<n.x||t.x>n.x+n.width||t.y+t.height<n.y||t.y>n.y+n.height)},t.prototype._testRectCircleCollision=function(t,n){var e=Math.abs(t.x-n.x-n.w/2),r=Math.abs(t.y-n.y-n.h/2);if(e>n.w/2+t.r)return!1;if(r>n.h/2+t.r)return!1;if(e<=n.w/2)return!0;if(r<=n.h/2)return!0;var i=e-n.w/2,o=r-n.h/2;return i*i+o*o<=t.r*t.r},t.prototype._testStarsCollision=function(t,n){for(var e=0;e<t.mapPartsArr.length-1;e++)for(var r=10*O*e,i=0;i<t.mapPartsArr[e].length;i++)if(99===t.mapPartsArr[e][i])for(var o={x:i%10*O+t.globalShift+r,y:Math.floor(i/10)*O,width:O,height:O},u=0;u<this.collisionModel.length-1;u++)if(this._testRectanglesCollision({x:this.x+this.collisionModel[u][0],y:this.y+this.collisionModel[u][1],width:this.collisionModel[u][2],height:this.collisionModel[u][3]},o)){this.soundDin.play(),t.mapPartsArr[e][i]=0,n.score+=300;break}return!1},t.prototype._testEnemyCollision=function(t,n){if(!this.isDead)for(var e=0;e<this.collisionModel.length;e++)for(var r=0;r<t.collisionModel.length;r++){var i={x:this.x+this.collisionModel[e][0],y:this.y+this.collisionModel[e][1],width:this.collisionModel[e][2],height:this.collisionModel[e][3]},o={x:t.x+t.collisionModel[r][0],y:t.y+t.collisionModel[r][1],width:t.collisionModel[r][2],height:t.collisionModel[r][3]};this._testRectanglesCollision(i,o)&&this.die(n)}},t.prototype.die=function(t){this.isDead=!0,this.xVelocity=0,this.yVelocity=0,this.animation.change(this.spriteSheet.frame_sets[1],1),this.controller.buttons[0].isShow=!0,this.controller.buttons[1].isShow=!1,this.controller.buttons[2]&&(this.controller.buttons[2].isShow=!1),this.controller.buttons[3]&&(this.controller.buttons[3].isShow=!1),t&&(t.mapDifficultyMultipler=0,t.speed=0)},t.prototype.drawDie=function(){this.xVelocity=0,this.jumping||(this.yVelocity-=15,this.jumping=!0),this.yVelocity<20&&(this.yVelocity+=1.194),this.oldY=this.y,this.y+=this.yVelocity,j.buffer.drawImage(this.spriteSheet.image,this.animation.frame*this.width,0,this.width,this.height,Math.floor(this.x),Math.floor(this.y),this.width,this.height)},t.prototype.drawStart=function(t){this.spriteSheet.image.src="/images/dog.png",this.animation.update(),j.buffer.drawImage(this.spriteSheet.image,this.animation.frame*this.width,0,this.width,this.height,Math.floor(this.x),Math.floor(this.y),this.width,this.height)},t.prototype.draw=function(t){if(this.isDead)j.buffer.drawImage(this.spriteSheet.image,this.animation.frame*this.width,0,this.width,this.height,Math.floor(this.x),Math.floor(this.y),this.width,this.height);else{if(this.controller.left&&(this.xVelocity-=2.2),this.controller.right&&(this.xVelocity+=2.9),!this.controller.up&&!0!==this.controller.jump||this.jumping||(this.yVelocity=-21,this.jumping=!0,this.isRun=!0,this.soundJump.play()),this.yVelocity<20&&(this.yVelocity+=1.194),this.oldY=this.y,this.isRun&&(this.x+=this.xVelocity),this.y+=this.yVelocity,this.xVelocity*=.55,Math.abs(this.xVelocity)<.01&&(this.xVelocity=0),this.x<0?(this.xVelocity=0,this.x=.001):this.x+this.width>j.buffer.canvas.width&&(this.xVelocity=0,this.x=j.buffer.canvas.width-this.width-.001),639<this.bottom&&this.die(t),0<this.y-this.oldY){var n=Math.floor((this.left-t.globalShift)/O),e=Math.floor((this.right-t.globalShift)/O),r=Math.floor(this.bottom/O),i=0;10<=n&&(i=Math.floor(n/10),n=Math.floor(n%10));var o=d[t.mapParts[i]],u=o[10*r+n];99!==u&&(0<u&&(u=1),0<u&&void 0!==u&&this.collision[u](this,r,n)),10<=e&&(i=Math.floor(e/10),e=Math.floor(e%10)),99!==(u=(o=d[t.mapParts[i]])[10*r+e])&&(0<u&&(u=1),0<u&&this.collision[u](this,r,e))}this.isRun?this.jumping?this.animation.change(this.spriteSheet.frame_sets[1],5):0===this.xVelocity?this.animation.change(this.spriteSheet.frame_sets[0],5):this.isDead?this.animation.change(this.spriteSheet.frame_sets[1],5):this.animation.change(this.spriteSheet.frame_sets[0],5):this.animation.change(this.spriteSheet.frame_sets[1],15),this.spriteSheet.image.src="/images/dog.png",this.score++,this.animation.update(),j.buffer.drawImage(this.spriteSheet.image,this.animation.frame*this.width,0,this.width,this.height,Math.floor(this.x),Math.floor(this.y),this.width,this.height),this.isDead||t.mapDifficultyMultipler++}},t}(),x=function(){function t(t){this.spriteSheet={frame_sets:[[0,1,2,3,2,1]],image:new Image},this.width=118,this.height=68,this.x=j.buffer.canvas.width+100,this.y=o(50,180),this.speed=t||1,this.xMultipler=1,this.yMultipler=3,this.animation=new w,this.animation.change(this.spriteSheet.frame_sets[0],5),this.spriteSheet.image.src="/images/bird.png",this.collisionModel=[[0,29,this.width,23],[20,15,70,23],[25,40,60,23]]}return Object.defineProperty(t.prototype,"bottom",{get:function(){return this.y+this.height},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"left",{get:function(){return this.x},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"top",{get:function(){return this.y},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"right",{get:function(){return this.x+this.width},enumerable:!0,configurable:!0}),t.prototype.draw=function(){this.x-=this.speed,this.y+=Math.sin(function(t){return t*Math.PI/180}(this.x*this.xMultipler))*this.yMultipler,this.animation.update(),this.x<-this.width&&(this.x=j.buffer.canvas.width+o(1e3,2500),this.y=o(50,150),this.xMultipler=o(.6,1.3),this.yMultipler=o(2,6)),this.x>-this.width&&this.x<j.buffer.canvas.width&&j.buffer.drawImage(this.spriteSheet.image,this.animation.frame*this.width,0,this.width,this.height,Math.floor(this.x),Math.floor(this.y),this.width,this.height)},t}(),S=function(){function t(){this.x=0,this.y=0,this.vx=0,this.vy=0,this.radius=0,this.alpha=0,this.reset()}return t.prototype.reset=function(){this.x=this.randBetween(0,window.innerWidth),this.y=this.randBetween(0,-window.innerHeight),this.vx=this.randBetween(-3,3),this.vy=this.randBetween(2,5),this.radius=this.randBetween(1,4),this.alpha=this.randBetween(.1,.9)},t.prototype.randBetween=function(t,n){return t+Math.random()*(n-t)},t.prototype.update=function(){this.x+=this.vx,this.y+=this.vy,this.y+this.radius>window.innerHeight&&this.reset()},t}(),_=function(){function t(){this.createSnowflakes()}return t.prototype.createSnowflakes=function(){var t=window.innerWidth/4;this.snowflakes=[];for(var n=0;n<t;n++)this.snowflakes.push(new S)},t.prototype.drawSnow=function(){for(var t=0,n=this.snowflakes;t<n.length;t++){var e=n[t];e.update(),j.buffer.save(),j.buffer.fillStyle="#FFF",j.buffer.beginPath(),j.buffer.arc(e.x,e.y,e.radius,0,3*Math.PI),j.buffer.closePath(),j.buffer.globalAlpha=e.alpha,j.buffer.fill(),j.buffer.restore()}},t}(),M=function(o,u,c,a){return new(c=c||Promise)(function(t,n){function e(t){try{i(a.next(t))}catch(t){n(t)}}function r(t){try{i(a.throw(t))}catch(t){n(t)}}function i(n){n.done?t(n.value):new c(function(t){t(n.value)}).then(e,r)}i((a=a.apply(o,u||[])).next())})},E=function(e,r){var i,o,u,t,c={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]};return t={next:n(0),throw:n(1),return:n(2)},"function"==typeof Symbol&&(t[Symbol.iterator]=function(){return this}),t;function n(n){return function(t){return function(n){if(i)throw new TypeError("Generator is already executing.");for(;c;)try{if(i=1,o&&(u=2&n[0]?o.return:n[0]?o.throw||((u=o.return)&&u.call(o),0):o.next)&&!(u=u.call(o,n[1])).done)return u;switch(o=0,u&&(n=[2&n[0],u.value]),n[0]){case 0:case 1:u=n;break;case 4:return c.label++,{value:n[1],done:!1};case 5:c.label++,o=n[1],n=[0];continue;case 7:n=c.ops.pop(),c.trys.pop();continue;default:if(!(u=0<(u=c.trys).length&&u[u.length-1])&&(6===n[0]||2===n[0])){c=0;continue}if(3===n[0]&&(!u||n[1]>u[0]&&n[1]<u[3])){c.label=n[1];break}if(6===n[0]&&c.label<u[1]){c.label=u[1],u=n;break}if(u&&c.label<u[2]){c.label=u[2],c.ops.push(n);break}u[2]&&c.ops.pop(),c.trys.pop();continue}n=r.call(e,c)}catch(t){n=[6,t],o=0}finally{i=u=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,t])}}},P=function(){function t(){this._queue=[],this._successCount=0,this._errorCount=0,this._cache={}}return t.prototype.add=function(t){this._queue.push(t)},t.prototype.downloadAll=function(t){0===this._queue.length&&t();for(var n=0;n<this._queue.length;n++){var e=this._queue[n];switch(e.split(".").pop()){case"png":case"jpg":case"jpeg":this._loadImage(e,t);break;case"json":this._loadJSON(e,t)}}},t.prototype.get=function(t){return this._cache[t]},t.prototype._isDone=function(){return this._queue.length===this._successCount+this._errorCount},t.prototype._loadImage=function(t,n){var e=this,r=new Image,i=t.split("/");i=i[i.length-1],r.addEventListener("load",function(){e._successCount++,e._isDone()&&n()},!1),r.addEventListener("error",function(){e._errorCount++,e._isDone()&&n()}),r.src=t,this._cache[t]=r},t.prototype._loadJSON=function(e,r){return M(this,void 0,void 0,function(){var n=this;return E(this,function(t){switch(t.label){case 0:return[4,fetch(e).then(function(t){return t.json()}).then(function(t){n._cache[e]=t,n._successCount++}).catch(function(){n._errorCount++}).then(function(){n._isDone()&&r()})];case 1:return t.sent(),[2]}})})},t}();e.d(n,"tileSize",function(){return O}),e.d(n,"soundBack",function(){return I}),e.d(n,"display",function(){return j}),e.d(n,"player",function(){return F}),e.d(n,"assets",function(){return W});var O=64,I=new Audio;I.src="../audio/back.mp3",I.volume=1,I.addEventListener("canplay",function(t){return I.play()});var j={buffer:document.createElement("canvas").getContext("2d"),output:document.querySelector("canvas").getContext("2d"),message:document.querySelector("p"),message2:document.querySelector("p.p"),buffer_output_ratio:1,boundingRectangle:void 0,clear:function(t){j.buffer.fillStyle=t||"#1f2529",j.buffer.fillRect(0,0,j.buffer.canvas.width,j.buffer.canvas.height)},render:function(){j.output.drawImage(j.buffer.canvas,0,0,j.buffer.canvas.width,j.buffer.canvas.height,0,0,j.output.canvas.width,j.output.canvas.height)},resize:function(){j.output.canvas.width=Math.floor(document.documentElement.clientWidth),j.output.canvas.height=Math.floor(1.3*j.output.canvas.width),j.boundingRectangle=j.output.canvas.getBoundingClientRect(),j.buffer_output_ratio=j.buffer.canvas.width/j.output.canvas.width}};j.buffer.canvas.width=640,j.buffer.canvas.height=832;var F=new b(0);F.animation.change(F.spriteSheet.frame_sets[2],5);var A=new x(6),k=[],R=new i("score",F.score.toString(),28,"sans-serif","#002a09",60,50,!1);k.push(R);var N=new Image;N.src="../images/icon-petshop.png";var T=new Image;T.src="../images/logo.png";var L=new m,C=(new _,0);u.buttons.forEach(function(t){return t.isShow=!1}),u.buttons[4].isShow=!0;var D,V=0,B=c(),G=function(){for((u.restart||u.start)&&function(){C=1,u.buttons[4].isShow=!1,F.startNewGame(),L.startNewGame(),A.x=j.buffer.canvas.width+200}(),D=c(),V+=Math.min(1,(D-B)/1e3);1/60<V;)V-=1/60,j.clear(),L.drawMap(),A.speed=L.speed+2,A.draw(),0===C?(j.buffer.drawImage(T,165,108,316,248),F.drawStart(L)):(F.isDead?F.drawDie():F.draw(L),F._testEnemyCollision(A,L),F._testStarsCollision(L,F)),j.buffer.fillStyle="#1f2529",j.buffer.fillRect(0,640,640,256),u.buttons.forEach(function(t){return t.draw()}),k[0].text=F.score.toString(),k.forEach(function(t){return t.draw()}),j.buffer.drawImage(N,20,26,28,28);B=D,j.render(),window.requestAnimationFrame(G)};window.addEventListener("resize",j.resize),window.addEventListener("mousedown",u.keyListener),window.addEventListener("mouseup",u.keyListener),window.addEventListener("keydown",u.keyListener),window.addEventListener("keyup",u.keyListener),document.querySelector("canvas").addEventListener("touchend",u.touchEnd,{passive:!1}),document.querySelector("canvas").addEventListener("touchmove",u.touchMove,{passive:!1}),document.querySelector("canvas").addEventListener("touchstart",u.touchStart,{passive:!1});var W=new P;["../images/dog.png","../images/0.png","../images/1.png","../images/2.png","../images/3.png","../images/4.png","../images/5.png","../images/6.png","../images/7.png","../images/8.png","../images/9.png","../images/10.png","../images/11.png","../images/12.png","../images/13.png","../images/14.png","../images/15.png","../images/16.png","../images/17.png","../images/18.png","../images/BG.png","../images/Tree_1.png","../images/Tree_2.png","../images/Tree_3.png","../images/icon-petshop.png","../images/bird.png","../images/left.png","../images/right.png","../images/jump.png","../images/restart.png","../images/start.png","../images/logo.png"].forEach(function(t){return W.add(t)}),W.downloadAll(function(){j.resize(),G(),window.assets=W})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,